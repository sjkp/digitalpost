//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace digitalpost
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DigitalPostClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public DigitalPostClient(System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = "https://test.digitalpost.dk/apis/v1";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            [System.Diagnostics.CodeAnalysis.MemberNotNull(nameof(_baseUrl))]
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Create AccessRequest
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessRequest> CreateAccessRequestAsync(AccessRequest body)
        {
            return CreateAccessRequestAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create AccessRequest
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequest> CreateAccessRequestAsync(AccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/"
                    urlBuilder_.Append("access-requests/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessRequestSearchResult> QueryAccessRequestsAsync(object any, object searchParameters, object fields, object page, object size, object sortFields)
        {
            return QueryAccessRequestsAsync(any, searchParameters, fields, page, size, sortFields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestSearchResult> QueryAccessRequestsAsync(object any, object searchParameters, object fields, object page, object size, object sortFields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/"
                    urlBuilder_.Append("access-requests/");
                    urlBuilder_.Append('?');
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch AccessRequest by id
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessRequest> FetchAccessRequestAsync(System.Guid id)
        {
            return FetchAccessRequestAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch AccessRequest by id
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequest> FetchAccessRequestAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/{id}"
                    urlBuilder_.Append("access-requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update AccessRequest
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessRequest> UpdateAccessRequestAsync(ETag if_Match, System.Guid id, AccessRequest body)
        {
            return UpdateAccessRequestAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update AccessRequest
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequest> UpdateAccessRequestAsync(ETag if_Match, System.Guid id, AccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/{id}"
                    urlBuilder_.Append("access-requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete AccessRequest
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteAccessRequestAsync(ETag if_Match, System.Guid id)
        {
            return DeleteAccessRequestAsync(if_Match, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete AccessRequest
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAccessRequestAsync(ETag if_Match, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/{id}"
                    urlBuilder_.Append("access-requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch Documentation content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> FetchAccessRequestDocumentationContentAsync(System.Guid accessRequestId, System.Guid id)
        {
            return FetchAccessRequestDocumentationContentAsync(accessRequestId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch Documentation content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> FetchAccessRequestDocumentationContentAsync(System.Guid accessRequestId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (accessRequestId == null)
                throw new System.ArgumentNullException("accessRequestId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/{accessRequestId}/documentations/{id}/content"
                    urlBuilder_.Append("access-requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accessRequestId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documentations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create/Update Documentation content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessRequest> UpdateAccessRequestDocumentationContentAsync(ETag if_Match, System.Guid accessRequestId, System.Guid id, FileParameter file)
        {
            return UpdateAccessRequestDocumentationContentAsync(if_Match, accessRequestId, id, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create/Update Documentation content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequest> UpdateAccessRequestDocumentationContentAsync(ETag if_Match, System.Guid accessRequestId, System.Guid id, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (accessRequestId == null)
                throw new System.ArgumentNullException("accessRequestId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/{accessRequestId}/documentations/{id}/content"
                    urlBuilder_.Append("access-requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accessRequestId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documentations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Activates target
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessRequest> ActivateAccessRequestAsync(TargetActivation body)
        {
            return ActivateAccessRequestAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Activates target
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequest> ActivateAccessRequestAsync(TargetActivation body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "access-requests/target/activate"
                    urlBuilder_.Append("access-requests/target/activate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Search for companies information, such as the identity of the company,name of the company, if there are active curator, trustee or liquidator access
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrganisationLookup> OrganisationLookupAsync(string cvrNumber)
        {
            return OrganisationLookupAsync(cvrNumber, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Search for companies information, such as the identity of the company,name of the company, if there are active curator, trustee or liquidator access
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganisationLookup> OrganisationLookupAsync(string cvrNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (cvrNumber == null)
                throw new System.ArgumentNullException("cvrNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisation-lookup/{cvrNumber}"
                    urlBuilder_.Append("organisation-lookup/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(cvrNumber, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganisationLookup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lookup information about a citizen by their full name and CPR number
        /// </remarks>
        /// <param name="cprNumber">One CPR number</param>
        /// <param name="firstNameProvided">First name or names of the looked up person</param>
        /// <param name="lastNameProvided">Last name or names of the looked up person</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CitizenLookupResult> LookupCitizenAsync(CitizenLookupCommand citizenLookupCommand, object cprNumber, object firstNameProvided, object lastNameProvided, object any, object searchParameters, object fields, object page, object size, object sortFields)
        {
            return LookupCitizenAsync(citizenLookupCommand, cprNumber, firstNameProvided, lastNameProvided, any, searchParameters, fields, page, size, sortFields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lookup information about a citizen by their full name and CPR number
        /// </remarks>
        /// <param name="cprNumber">One CPR number</param>
        /// <param name="firstNameProvided">First name or names of the looked up person</param>
        /// <param name="lastNameProvided">Last name or names of the looked up person</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CitizenLookupResult> LookupCitizenAsync(CitizenLookupCommand citizenLookupCommand, object cprNumber, object firstNameProvided, object lastNameProvided, object any, object searchParameters, object fields, object page, object size, object sortFields, System.Threading.CancellationToken cancellationToken)
        {
            if (citizenLookupCommand == null)
                throw new System.ArgumentNullException("citizenLookupCommand");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "citizen-lookup/"
                    urlBuilder_.Append("citizen-lookup/");
                    urlBuilder_.Append('?');
                    foreach (var item_ in citizenLookupCommand.AdditionalProperties) { urlBuilder_.Append(System.Uri.EscapeDataString(item_.Key)).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_.Value, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (cprNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cprNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cprNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (firstNameProvided != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("firstNameProvided")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(firstNameProvided, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastNameProvided != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastNameProvided")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastNameProvided, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CitizenLookupResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get information about the current user.&lt;br/&gt;Implementation is based on [OpenID Connect specification](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        /// </remarks>
        /// <param name="authorization">Bearer Access Token issued by NgDP</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetUserInfoAsync(object authorization)
        {
            return GetUserInfoAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get information about the current user.&lt;br/&gt;Implementation is based on [OpenID Connect specification](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        /// </remarks>
        /// <param name="authorization">Bearer Access Token issued by NgDP</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetUserInfoAsync(object authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/userinfo"
                    urlBuilder_.Append("oauth/userinfo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource was not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get information about the current user.&lt;br/&gt;Implementation is based on [OpenID Connect specification](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        /// </remarks>
        /// <param name="authorization">Bearer Access Token issued by NgDP</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> PostUserInfoAsync(object authorization)
        {
            return PostUserInfoAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get information about the current user.&lt;br/&gt;Implementation is based on [OpenID Connect specification](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        /// </remarks>
        /// <param name="authorization">Bearer Access Token issued by NgDP</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PostUserInfoAsync(object authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/userinfo"
                    urlBuilder_.Append("oauth/userinfo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource was not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Revoke access token or refresh token&lt;br/&gt;Implementation is based on [OAuth 2.0 Token Revocation](https://datatracker.ietf.org/doc/html/rfc7009#section-2.1)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RevokeTokenAsync(TokenRevocation body)
        {
            return RevokeTokenAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Revoke access token or refresh token&lt;br/&gt;Implementation is based on [OAuth 2.0 Token Revocation](https://datatracker.ietf.org/doc/html/rfc7009#section-2.1)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RevokeTokenAsync(TokenRevocation body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var dictionary_ = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/revoke"
                    urlBuilder_.Append("oauth/revoke");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Logout current user and redirect user to the specified URL&lt;br/&gt;Implementation is based on [OpenID Connect RP-Initiated Logout](https://openid.net/specs/openid-connect-rpinitiated-1_0.html)
        /// </remarks>
        /// <param name="id_token_hint">ID Token previously issued by NgDP</param>
        /// <param name="post_logout_redirect_uri">The Post logout URL that was registered with NgDP</param>
        /// <param name="state">Opaque value used by the RP to maintain state between the logout request and the callback to the redirected URL</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetEndSessionAsync(object id_token_hint, object post_logout_redirect_uri, object state)
        {
            return GetEndSessionAsync(id_token_hint, post_logout_redirect_uri, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Logout current user and redirect user to the specified URL&lt;br/&gt;Implementation is based on [OpenID Connect RP-Initiated Logout](https://openid.net/specs/openid-connect-rpinitiated-1_0.html)
        /// </remarks>
        /// <param name="id_token_hint">ID Token previously issued by NgDP</param>
        /// <param name="post_logout_redirect_uri">The Post logout URL that was registered with NgDP</param>
        /// <param name="state">Opaque value used by the RP to maintain state between the logout request and the callback to the redirected URL</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetEndSessionAsync(object id_token_hint, object post_logout_redirect_uri, object state, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/logout"
                    urlBuilder_.Append("oauth/logout");
                    urlBuilder_.Append('?');
                    if (id_token_hint != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id_token_hint")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_token_hint, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (post_logout_redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("post_logout_redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(post_logout_redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Logout current user and redirect user to the specified URL&lt;br/&gt;Implementation is based on [OpenID Connect RP-Initiated Logout](https://openid.net/specs/openid-connect-rpinitiated-1_0.html)
        /// </remarks>
        /// <param name="id_token_hint">ID Token previously issued by NgDP</param>
        /// <param name="post_logout_redirect_uri">The Post logout URL that was registered with NgDP</param>
        /// <param name="state">Opaque value used by the RP to maintain state between the logout request and the callback to the redirected URL</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PostEndSessionAsync(object id_token_hint, object post_logout_redirect_uri, object state)
        {
            return PostEndSessionAsync(id_token_hint, post_logout_redirect_uri, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Logout current user and redirect user to the specified URL&lt;br/&gt;Implementation is based on [OpenID Connect RP-Initiated Logout](https://openid.net/specs/openid-connect-rpinitiated-1_0.html)
        /// </remarks>
        /// <param name="id_token_hint">ID Token previously issued by NgDP</param>
        /// <param name="post_logout_redirect_uri">The Post logout URL that was registered with NgDP</param>
        /// <param name="state">Opaque value used by the RP to maintain state between the logout request and the callback to the redirected URL</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostEndSessionAsync(object id_token_hint, object post_logout_redirect_uri, object state, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/logout"
                    urlBuilder_.Append("oauth/logout");
                    urlBuilder_.Append('?');
                    if (id_token_hint != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id_token_hint")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_token_hint, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (post_logout_redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("post_logout_redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(post_logout_redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Endpoint for Polling session state.&lt;br/&gt;Implementation is based on [OpenId Connection Session Management](https://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification)
        /// </remarks>
        /// <param name="body">Client ID + Session State</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetSessionStateChangeAsync(System.Guid body)
        {
            return GetSessionStateChangeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Endpoint for Polling session state.&lt;br/&gt;Implementation is based on [OpenId Connection Session Management](https://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification)
        /// </remarks>
        /// <param name="body">Client ID + Session State</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetSessionStateChangeAsync(System.Guid body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/check_session"
                    urlBuilder_.Append("oauth/check_session");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// OP IFrame Endpoint.&lt;br/&gt;Implementation is based on [OpenId Connection Session Management](https://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetSessionStateChangeIframeAsync()
        {
            return GetSessionStateChangeIframeAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// OP IFrame Endpoint.&lt;br/&gt;Implementation is based on [OpenId Connection Session Management](https://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetSessionStateChangeIframeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/check_session_iframe"
                    urlBuilder_.Append("oauth/check_session_iframe");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieve a list of all current user's consents on NgDP.&lt;br/&gt;Consent represents user's permission to allow an application to access to access their resources inside NgDP
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagingResult> GetRefreshTokensAsync(Pageable pageable)
        {
            return GetRefreshTokensAsync(pageable, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieve a list of all current user's consents on NgDP.&lt;br/&gt;Consent represents user's permission to allow an application to access to access their resources inside NgDP
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagingResult> GetRefreshTokensAsync(Pageable pageable, System.Threading.CancellationToken cancellationToken)
        {
            if (pageable == null)
                throw new System.ArgumentNullException("pageable");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "consents"
                    urlBuilder_.Append("consents");
                    urlBuilder_.Append('?');
                    foreach (var item_ in pageable.AdditionalProperties) { urlBuilder_.Append(System.Uri.EscapeDataString(item_.Key)).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_.Value, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Remove a consent of current user.&lt;br/&gt;Removing a consent will also revoke tokens of an active application that is used by current user
        /// </remarks>
        /// <param name="id">ID of the consent</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagingResult> RevokeRefreshTokenAsync(object id)
        {
            return RevokeRefreshTokenAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Remove a consent of current user.&lt;br/&gt;Removing a consent will also revoke tokens of an active application that is used by current user
        /// </remarks>
        /// <param name="id">ID of the consent</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagingResult> RevokeRefreshTokenAsync(object id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "consents/{id}"
                    urlBuilder_.Append("consents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get OAuth2/OIDC Tokens&lt;br/&gt;.Implementations is based on following specification:&lt;br/&gt;- [Authorization Code Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3)&lt;br/&gt;- [Refresh Token Grant](https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens)
        /// </remarks>
        /// <param name="authorization">Basic authentication of the client</param>
        /// <param name="grant_type">Required. Can be 'authorization_code' or 'refresh_token'</param>
        /// <param name="refresh_token">Required if grant type is 'refresh_token'. Value of refresh token</param>
        /// <param name="code">Required if grant type is 'authorization_code'. Value of the code returned from Authorization Endpoint</param>
        /// <param name="client_id">Required if grant type is 'authorization_code'. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required if grant type is 'authorization_code'. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="code_verifier">Required if grant type is 'authorization_code. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Plain text value that originated code_challenge from Authorization Endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OAuth2AccessToken> GetRefreshToken_1_1Async(object authorization, object grant_type, object refresh_token, object code, object client_id, object redirect_uri, object code_verifier)
        {
            return GetRefreshToken_1_1Async(authorization, grant_type, refresh_token, code, client_id, redirect_uri, code_verifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get OAuth2/OIDC Tokens&lt;br/&gt;.Implementations is based on following specification:&lt;br/&gt;- [Authorization Code Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3)&lt;br/&gt;- [Refresh Token Grant](https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens)
        /// </remarks>
        /// <param name="authorization">Basic authentication of the client</param>
        /// <param name="grant_type">Required. Can be 'authorization_code' or 'refresh_token'</param>
        /// <param name="refresh_token">Required if grant type is 'refresh_token'. Value of refresh token</param>
        /// <param name="code">Required if grant type is 'authorization_code'. Value of the code returned from Authorization Endpoint</param>
        /// <param name="client_id">Required if grant type is 'authorization_code'. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required if grant type is 'authorization_code'. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="code_verifier">Required if grant type is 'authorization_code. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Plain text value that originated code_challenge from Authorization Endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OAuth2AccessToken> GetRefreshToken_1_1Async(object authorization, object grant_type, object refresh_token, object code, object client_id, object redirect_uri, object code_verifier, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/token"
                    urlBuilder_.Append("oauth/token");
                    urlBuilder_.Append('?');
                    if (grant_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("grant_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grant_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (refresh_token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refresh_token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refresh_token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code_verifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code_verifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code_verifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OAuth2AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OAuth2AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<OAuth2AccessToken>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OAuth2AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<OAuth2AccessToken>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Post OAuth2/OIDC Token&lt;br/&gt;.Implementations is based on following specification:&lt;br/&gt;- [Authorization Code Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3)&lt;br/&gt;- [Refresh Token Grant](https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens)
        /// </remarks>
        /// <param name="authorization">Basic authentication of the client</param>
        /// <param name="grant_type">Required. Can be 'authorization_code' or 'refresh_token'</param>
        /// <param name="refresh_token">Required if grant type is 'refresh_token'. Value of refresh token</param>
        /// <param name="code">Required if grant type is 'authorization_code'. Value of the code returned from Authorization Endpoint</param>
        /// <param name="client_id">Required if grant type is 'authorization_code'. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required if grant type is 'authorization_code'. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="code_verifier">Required if grant type is 'authorization_code. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Plain text value that originated code_challenge from Authorization Endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OAuth2AccessToken> PostRefreshToken_1_1Async(object authorization, object grant_type, object refresh_token, object code, object client_id, object redirect_uri, object code_verifier)
        {
            return PostRefreshToken_1_1Async(authorization, grant_type, refresh_token, code, client_id, redirect_uri, code_verifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Post OAuth2/OIDC Token&lt;br/&gt;.Implementations is based on following specification:&lt;br/&gt;- [Authorization Code Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3)&lt;br/&gt;- [Refresh Token Grant](https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens)
        /// </remarks>
        /// <param name="authorization">Basic authentication of the client</param>
        /// <param name="grant_type">Required. Can be 'authorization_code' or 'refresh_token'</param>
        /// <param name="refresh_token">Required if grant type is 'refresh_token'. Value of refresh token</param>
        /// <param name="code">Required if grant type is 'authorization_code'. Value of the code returned from Authorization Endpoint</param>
        /// <param name="client_id">Required if grant type is 'authorization_code'. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required if grant type is 'authorization_code'. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="code_verifier">Required if grant type is 'authorization_code. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Plain text value that originated code_challenge from Authorization Endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OAuth2AccessToken> PostRefreshToken_1_1Async(object authorization, object grant_type, object refresh_token, object code, object client_id, object redirect_uri, object code_verifier, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/token"
                    urlBuilder_.Append("oauth/token");
                    urlBuilder_.Append('?');
                    if (grant_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("grant_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(grant_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (refresh_token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refresh_token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refresh_token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code_verifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code_verifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code_verifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OAuth2AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OAuth2AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<OAuth2AccessToken>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OAuth2AccessToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<OAuth2AccessToken>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get Authorization Code&lt;br/&gt;.Implementations is based on [OIDC Authentication Endpoint](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthorizationEndpoint)
        /// </remarks>
        /// <param name="response_type">Required. Expected response type. Must be 'code'</param>
        /// <param name="client_id">Required. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="scope">Required. Must be 'openid'</param>
        /// <param name="state">Required. An opaque value used by the client to maintain state between the request and callback. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="nonce">Required. An random value to avoid replay attack. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="code_challenge">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Text length must be at least 128 characters</param>
        /// <param name="code_challenge_method">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Must be 'S256'</param>
        /// <param name="deviceId">Required if the client is a native mobile application. ID of the mobile device</param>
        /// <param name="deviceName">Required if the client is a native mobile application. Name of the mobile device</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetAuthorizationCodeAsync(object response_type, object client_id, object redirect_uri, object scope, object state, object nonce, object code_challenge, object code_challenge_method, object deviceId, object deviceName)
        {
            return GetAuthorizationCodeAsync(response_type, client_id, redirect_uri, scope, state, nonce, code_challenge, code_challenge_method, deviceId, deviceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get Authorization Code&lt;br/&gt;.Implementations is based on [OIDC Authentication Endpoint](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthorizationEndpoint)
        /// </remarks>
        /// <param name="response_type">Required. Expected response type. Must be 'code'</param>
        /// <param name="client_id">Required. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="scope">Required. Must be 'openid'</param>
        /// <param name="state">Required. An opaque value used by the client to maintain state between the request and callback. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="nonce">Required. An random value to avoid replay attack. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="code_challenge">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Text length must be at least 128 characters</param>
        /// <param name="code_challenge_method">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Must be 'S256'</param>
        /// <param name="deviceId">Required if the client is a native mobile application. ID of the mobile device</param>
        /// <param name="deviceName">Required if the client is a native mobile application. Name of the mobile device</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetAuthorizationCodeAsync(object response_type, object client_id, object redirect_uri, object scope, object state, object nonce, object code_challenge, object code_challenge_method, object deviceId, object deviceName, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/authorize"
                    urlBuilder_.Append("oauth/authorize");
                    urlBuilder_.Append('?');
                    if (response_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("response_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(response_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nonce != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("nonce")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nonce, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code_challenge != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code_challenge")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code_challenge, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code_challenge_method != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code_challenge_method")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code_challenge_method, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deviceId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deviceName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deviceName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deviceName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 303)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelAndView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelAndView>("See Other", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Post Authorization Code&lt;br/&gt;.Implementations is based on [OIDC Authentication Endpoint](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthorizationEndpoint)
        /// </remarks>
        /// <param name="response_type">Required. Expected response type. Must be 'code'</param>
        /// <param name="client_id">Required. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="scope">Required. Must be 'openid'</param>
        /// <param name="state">Required. An opaque value used by the client to maintain state between the request and callback. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="nonce">Required. An random value to avoid replay attack. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="code_challenge">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Text length must be at least 128 characters</param>
        /// <param name="code_challenge_method">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Must be 'S256'</param>
        /// <param name="deviceId">Required if the client is a native mobile application. ID of the mobile device</param>
        /// <param name="deviceName">Required if the client is a native mobile application. Name of the mobile device</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PostAuthorizationCodeAsync(object response_type, object client_id, object redirect_uri, object scope, object state, object nonce, object code_challenge, object code_challenge_method, object deviceId, object deviceName)
        {
            return PostAuthorizationCodeAsync(response_type, client_id, redirect_uri, scope, state, nonce, code_challenge, code_challenge_method, deviceId, deviceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Post Authorization Code&lt;br/&gt;.Implementations is based on [OIDC Authentication Endpoint](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthorizationEndpoint)
        /// </remarks>
        /// <param name="response_type">Required. Expected response type. Must be 'code'</param>
        /// <param name="client_id">Required. Client ID that was registered with NgDP</param>
        /// <param name="redirect_uri">Required. Redirect URL of the client that was registered with NgDP</param>
        /// <param name="scope">Required. Must be 'openid'</param>
        /// <param name="state">Required. An opaque value used by the client to maintain state between the request and callback. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="nonce">Required. An random value to avoid replay attack. Alphanumeric string with at least 128-bit entropy, minimum length is 22</param>
        /// <param name="code_challenge">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Text length must be at least 128 characters</param>
        /// <param name="code_challenge_method">Required. Implementation of [OAuth2 PKCE](https://datatracker.ietf.org/doc/html/rfc7636). Must be 'S256'</param>
        /// <param name="deviceId">Required if the client is a native mobile application. ID of the mobile device</param>
        /// <param name="deviceName">Required if the client is a native mobile application. Name of the mobile device</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostAuthorizationCodeAsync(object response_type, object client_id, object redirect_uri, object scope, object state, object nonce, object code_challenge, object code_challenge_method, object deviceId, object deviceName, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/authorize"
                    urlBuilder_.Append("oauth/authorize");
                    urlBuilder_.Append('?');
                    if (response_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("response_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(response_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (client_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("client_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirect_uri != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirect_uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (nonce != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("nonce")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nonce, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code_challenge != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code_challenge")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code_challenge, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code_challenge_method != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code_challenge_method")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code_challenge_method, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deviceId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deviceName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deviceName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deviceName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 303)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelAndView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelAndView>("See Other", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// A publicly accessible endpoint to retrieve Set of [JSON Web Key](https://datatracker.ietf.org/doc/html/rfc7517)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<JWKSet> GetJwkSetAsync()
        {
            return GetJwkSetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// A publicly accessible endpoint to retrieve Set of [JSON Web Key](https://datatracker.ietf.org/doc/html/rfc7517)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JWKSet> GetJwkSetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/jwks.json"
                    urlBuilder_.Append("oauth/jwks.json");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JWKSet>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The resource was not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Publicly accessible Open ID Connect Discovery Endpoint to retrieve configuration metadata.&lt;br/&gt;Implementation is based on [OpenID Connect Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpenIdConfiguration> GetOpenIdConfigurationAsync()
        {
            return GetOpenIdConfigurationAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Publicly accessible Open ID Connect Discovery Endpoint to retrieve configuration metadata.&lt;br/&gt;Implementation is based on [OpenID Connect Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpenIdConfiguration> GetOpenIdConfigurationAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "oauth/.well-known/openid-configuration"
                    urlBuilder_.Append("oauth/.well-known/openid-configuration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpenIdConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.It is possible to query using the body of the request when providing the bulk parameter
        /// </remarks>
        /// <param name="id">One or more Contact ids</param>
        /// <param name="cprNumber">One or more Contact Cpr numbers</param>
        /// <param name="cvrNumber">One or more Contact Cvr numbers</param>
        /// <param name="lastUpdated">Last updated date</param>
        /// <param name="isBulkLookup">Bulk parameter - set to true enables using the body for queries</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactSearchResult> QueryContactsAsync(object id, object cprNumber, object cvrNumber, object lastUpdated, object isBulkLookup, object page, object size, object sortFields, object any, object searchParameters, object fields, object body)
        {
            return QueryContactsAsync(id, cprNumber, cvrNumber, lastUpdated, isBulkLookup, page, size, sortFields, any, searchParameters, fields, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.It is possible to query using the body of the request when providing the bulk parameter
        /// </remarks>
        /// <param name="id">One or more Contact ids</param>
        /// <param name="cprNumber">One or more Contact Cpr numbers</param>
        /// <param name="cvrNumber">One or more Contact Cvr numbers</param>
        /// <param name="lastUpdated">Last updated date</param>
        /// <param name="isBulkLookup">Bulk parameter - set to true enables using the body for queries</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactSearchResult> QueryContactsAsync(object id, object cprNumber, object cvrNumber, object lastUpdated, object isBulkLookup, object page, object size, object sortFields, object any, object searchParameters, object fields, object body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/"
                    urlBuilder_.Append("contacts/");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cprNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cprNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cprNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvrNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvrNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastUpdated, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isBulkLookup != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isBulkLookup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isBulkLookup, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch contact information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Contact> FetchContactAsync(System.Guid id)
        {
            return FetchContactAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch contact information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Contact> FetchContactAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/{id}"
                    urlBuilder_.Append("contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contact>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update Contact information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Contact> UpdateContactAsync(ETag if_Match, System.Guid id, Contact body)
        {
            return UpdateContactAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update Contact information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Contact> UpdateContactAsync(ETag if_Match, System.Guid id, Contact body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/{id}"
                    urlBuilder_.Append("contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contact>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Verify contact subscription and update verification time
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Contact> VerifyContactSubscriptionAsync(System.Guid contactId, System.Guid id, SubscriptionVerificationCommand body)
        {
            return VerifyContactSubscriptionAsync(contactId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Verify contact subscription and update verification time
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Contact> VerifyContactSubscriptionAsync(System.Guid contactId, System.Guid id, SubscriptionVerificationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/{contactId}/verifications/{id}"
                    urlBuilder_.Append("contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/verifications/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contact>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update contact subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactSubscription> UpdateContactSubscriptionAsync(ETag if_Match, System.Guid id, ContactSubscriptionCommand body)
        {
            return UpdateContactSubscriptionAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update contact subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactSubscription> UpdateContactSubscriptionAsync(ETag if_Match, System.Guid id, ContactSubscriptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/subscriptions/{id}"
                    urlBuilder_.Append("contacts/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactSubscription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete contact subscription information
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactSubscription> DeleteContactSubscriptionAsync(ETag if_Match, System.Guid id)
        {
            return DeleteContactSubscriptionAsync(if_Match, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete contact subscription information
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactSubscription> DeleteContactSubscriptionAsync(ETag if_Match, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/subscriptions/{id}"
                    urlBuilder_.Append("contacts/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactSubscription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get contact subscription information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactSubscription>> FetchContactSubscriptionAsync()
        {
            return FetchContactSubscriptionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get contact subscription information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactSubscription>> FetchContactSubscriptionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/subscriptions/"
                    urlBuilder_.Append("contacts/subscriptions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactSubscription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create contact subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactSubscription> CreateContactSubscriptionAsync(ContactSubscriptionCommand body)
        {
            return CreateContactSubscriptionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create contact subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactSubscription> CreateContactSubscriptionAsync(ContactSubscriptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contacts/subscriptions/"
                    urlBuilder_.Append("contacts/subscriptions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactSubscription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a specific part list for a 'tilmeldingsliste'
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> RegistrationStatusPartListAsync(System.Guid systemId, int tilmeldingslisteId, int dellisteId)
        {
            return RegistrationStatusPartListAsync(systemId, tilmeldingslisteId, dellisteId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a specific part list for a 'tilmeldingsliste'
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> RegistrationStatusPartListAsync(System.Guid systemId, int tilmeldingslisteId, int dellisteId, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (tilmeldingslisteId == null)
                throw new System.ArgumentNullException("tilmeldingslisteId");

            if (dellisteId == null)
                throw new System.ArgumentNullException("dellisteId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "afsendersystem/{systemId}/tilmeldingsliste/{tilmeldingslisteId}/{dellisteId}"
                    urlBuilder_.Append("afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tilmeldingsliste/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tilmeldingslisteId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(dellisteId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a'tilmeldingsliste'
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> RegistrationStatusPListAsync(System.Guid systemId)
        {
            return RegistrationStatusPListAsync(systemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a'tilmeldingsliste'
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> RegistrationStatusPListAsync(System.Guid systemId, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "afsendersystem/{systemId}/tilmeldingsliste/"
                    urlBuilder_.Append("afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tilmeldingsliste/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a boolean if the contact is able to receive a specific'indholdstype'
        /// </remarks>
        /// <param name="cpr">CPR number - 10 digits</param>
        /// <param name="cvr">CVR number - 8 digits</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> RegistrationStatusCprCvrAsync(System.Guid systemId, int indholdsTypeId, object cpr, object cvr)
        {
            return RegistrationStatusCprCvrAsync(systemId, indholdsTypeId, cpr, cvr, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a boolean if the contact is able to receive a specific'indholdstype'
        /// </remarks>
        /// <param name="cpr">CPR number - 10 digits</param>
        /// <param name="cvr">CVR number - 8 digits</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> RegistrationStatusCprCvrAsync(System.Guid systemId, int indholdsTypeId, object cpr, object cvr, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (indholdsTypeId == null)
                throw new System.ArgumentNullException("indholdsTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "afsendersystem/{systemId}/tilmeldinger/{indholdsTypeId}"
                    urlBuilder_.Append("afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tilmeldinger/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(indholdsTypeId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (cpr != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cpr")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cpr, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvr != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvr")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvr, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a single Memo 1.1.0 as XML
        /// <br/>* Content-Type: __application/xml__
        /// <br/>* Response body is Memo 1.1.0 XML.
        /// <br/>* Link to schemas [https://bitbucket.org/nc-dp/memo-lib-java/src/release-0.7.3/src/main/resources/schemas/](https://bitbucket.org/nc-dp/memo-lib-java/src/release-0.7.3/src/main/resources/schemas/).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> FetchMemoAsync(System.Guid id)
        {
            return FetchMemoAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a single Memo 1.1.0 as XML
        /// <br/>* Content-Type: __application/xml__
        /// <br/>* Response body is Memo 1.1.0 XML.
        /// <br/>* Link to schemas [https://bitbucket.org/nc-dp/memo-lib-java/src/release-0.7.3/src/main/resources/schemas/](https://bitbucket.org/nc-dp/memo-lib-java/src/release-0.7.3/src/main/resources/schemas/).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> FetchMemoAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "memos/{id}"
                    urlBuilder_.Append("memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete Memo
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteMemoAsync(System.Guid id)
        {
            return DeleteMemoAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete Memo
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteMemoAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "memos/{id}"
                    urlBuilder_.Append("memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a list of available messages
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagingResultUUID> ListAvailableMemosAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string> sort)
        {
            return ListAvailableMemosAsync(page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a list of available messages
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagingResultUUID> ListAvailableMemosAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "memos/"
                    urlBuilder_.Append("memos/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResultUUID>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// # Send Memos (Memo 1.1.0)
        /// <br/>Memos can be sent as an single XML document or as multiple in an archive.
        /// <br/>## Single Memo as XML
        /// <br/>* Content-Type: __application/xml__ or __text/xml__
        /// <br/>* Request body is Memo 1.1.0 XML.
        /// <br/>* Link to schemas [https://bitbucket.org/nc-dp/memo-lib-java/src/release-1.0.1/src/main/resources/schemas/](https://bitbucket.org/nc-dp/memo-lib-java/src/release-1.0.1/src/main/resources/schemas/).
        /// <br/>* Request param variable `memo-message-uuid` must be messageUUID from Memo's `MessageHeader`.
        /// <br/>## Multiple Memos
        /// <br/>* Content-Type: __application/x-lzma__ or __multipart/form-data__
        /// <br/>* Request body is archive of multiple Memos POSTed as tar archive using lzma compression.
        /// <br/>* When using __multipart/form-data__ to deliver the archive, the form-data part element name must be __file__, and the content-type of the part must still be __application/x-lzma__.
        /// </remarks>
        /// <param name="memo_message_uuid">messageUUID of MeMo to send. Required when Content-Type is either __application/xml__ or __text/xml__. Not applicable when content type is __application/x-lzma__ or __multipart/form-data__.</param>
        /// <param name="content_Length">Size of Memo XML or tar.lzma file.</param>
        /// <param name="body">When Content-Type is of XML kind, the body must be an XML document matching the Memo 1.1.0 schema.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Receipt> SendMemoAsync(object memo_message_uuid, object content_Length, FileParameter body)
        {
            return SendMemoAsync(memo_message_uuid, content_Length, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// # Send Memos (Memo 1.1.0)
        /// <br/>Memos can be sent as an single XML document or as multiple in an archive.
        /// <br/>## Single Memo as XML
        /// <br/>* Content-Type: __application/xml__ or __text/xml__
        /// <br/>* Request body is Memo 1.1.0 XML.
        /// <br/>* Link to schemas [https://bitbucket.org/nc-dp/memo-lib-java/src/release-1.0.1/src/main/resources/schemas/](https://bitbucket.org/nc-dp/memo-lib-java/src/release-1.0.1/src/main/resources/schemas/).
        /// <br/>* Request param variable `memo-message-uuid` must be messageUUID from Memo's `MessageHeader`.
        /// <br/>## Multiple Memos
        /// <br/>* Content-Type: __application/x-lzma__ or __multipart/form-data__
        /// <br/>* Request body is archive of multiple Memos POSTed as tar archive using lzma compression.
        /// <br/>* When using __multipart/form-data__ to deliver the archive, the form-data part element name must be __file__, and the content-type of the part must still be __application/x-lzma__.
        /// </remarks>
        /// <param name="memo_message_uuid">messageUUID of MeMo to send. Required when Content-Type is either __application/xml__ or __text/xml__. Not applicable when content type is __application/x-lzma__ or __multipart/form-data__.</param>
        /// <param name="content_Length">Size of Memo XML or tar.lzma file.</param>
        /// <param name="body">When Content-Type is of XML kind, the body must be an XML document matching the Memo 1.1.0 schema.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Receipt> SendMemoAsync(object memo_message_uuid, object content_Length, FileParameter body, System.Threading.CancellationToken cancellationToken)
        {
            if (memo_message_uuid == null)
                throw new System.ArgumentNullException("memo_message_uuid");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (content_Length == null)
                        throw new System.ArgumentNullException("content_Length");
                    request_.Headers.TryAddWithoutValidation("Content-Length", ConvertToString(content_Length, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StreamContent(body.Data);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(body.ContentType);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "memos/"
                    urlBuilder_.Append("memos/");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("memo-message-uuid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(memo_message_uuid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Receipt>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a single Receipt and deletes it afterwards
        /// </remarks>
        /// <param name="delete">Boolean to specify whether receipt should be deleted as part of the GET request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Receipt> FetchReceiptAsync(System.Guid id, object delete)
        {
            return FetchReceiptAsync(id, delete, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a single Receipt and deletes it afterwards
        /// </remarks>
        /// <param name="delete">Boolean to specify whether receipt should be deleted as part of the GET request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Receipt> FetchReceiptAsync(System.Guid id, object delete, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "receipts/{id}"
                    urlBuilder_.Append("receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (delete != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("delete")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(delete, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Receipt>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Receipt>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Receipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Receipt>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Deletes a single Receipt
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteReceiptAsync(System.Guid id)
        {
            return DeleteReceiptAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes a single Receipt
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteReceiptAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "receipts/{id}"
                    urlBuilder_.Append("receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Service unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a list of available receipts
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagingResultUUID> ListAvailableReceiptsAsync(ReceiptSearchCommand receiptSearchCommand)
        {
            return ListAvailableReceiptsAsync(receiptSearchCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a list of available receipts
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagingResultUUID> ListAvailableReceiptsAsync(ReceiptSearchCommand receiptSearchCommand, System.Threading.CancellationToken cancellationToken)
        {
            if (receiptSearchCommand == null)
                throw new System.ArgumentNullException("receiptSearchCommand");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "receipts/"
                    urlBuilder_.Append("receipts/");
                    urlBuilder_.Append('?');
                    foreach (var item_ in receiptSearchCommand.AdditionalProperties) { urlBuilder_.Append(System.Uri.EscapeDataString(item_.Key)).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_.Value, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResultUUID>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResultUUID>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<PagingResultUUID>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResultUUID>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<PagingResultUUID>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingResultUUID>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<PagingResultUUID>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a list of receipts
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReceiptSearchResult> BulkFetchReceiptsAsync(ReceiptSearchCommand receiptSearchCommand)
        {
            return BulkFetchReceiptsAsync(receiptSearchCommand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a list of receipts
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceiptSearchResult> BulkFetchReceiptsAsync(ReceiptSearchCommand receiptSearchCommand, System.Threading.CancellationToken cancellationToken)
        {
            if (receiptSearchCommand == null)
                throw new System.ArgumentNullException("receiptSearchCommand");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "receipts-bulk/"
                    urlBuilder_.Append("receipts-bulk/");
                    urlBuilder_.Append('?');
                    foreach (var item_ in receiptSearchCommand.AdditionalProperties) { urlBuilder_.Append(System.Uri.EscapeDataString(item_.Key)).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_.Value, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReceiptSearchResult>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReceiptSearchResult>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReceiptSearchResult>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete NgdpReceipt that have a receiptListId
        /// </remarks>
        /// <returns>NgdpReceipt with receipListId deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FejlType> DeleteReceiptsAsync(System.Guid systemId, int id)
        {
            return DeleteReceiptsAsync(systemId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete NgdpReceipt that have a receiptListId
        /// </remarks>
        /// <returns>NgdpReceipt with receipListId deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FejlType> DeleteReceiptsAsync(System.Guid systemId, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "afsendersystem/{systemId}/masseafsendelser/kvitteringsliste/{id}"
                    urlBuilder_.Append("afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/masseafsendelser/kvitteringsliste/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create a business receipt for a single Memo
        /// </remarks>
        /// <param name="body">Submit a business receipt for a Memo.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateReceiptAsync(System.Guid id, Receipt body)
        {
            return CreateReceiptAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create a business receipt for a single Memo
        /// </remarks>
        /// <param name="body">Submit a business receipt for a Memo.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateReceiptAsync(System.Guid id, Receipt body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "memos/{id}/receipt"
                    urlBuilder_.Append("memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/receipt");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Receives DP2 xml message and validates it asynchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FejlType> CreateDp2AsynchronousAsync(System.Guid systemId, string meddelelseId, string body)
        {
            return CreateDp2AsynchronousAsync(systemId, meddelelseId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Receives DP2 xml message and validates it asynchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FejlType> CreateDp2AsynchronousAsync(System.Guid systemId, string meddelelseId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (meddelelseId == null)
                throw new System.ArgumentNullException("meddelelseId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "dp2/afsendersystem/{systemId}/masseafsendelser/{meddelelseId}"
                    urlBuilder_.Append("dp2/afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/masseafsendelser/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(meddelelseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Receives DP2 xml message and validates it synchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FejlType> CreateDp2SynchronousAsync(System.Guid systemId, string meddelelseId, string body)
        {
            return CreateDp2SynchronousAsync(systemId, meddelelseId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Receives DP2 xml message and validates it synchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FejlType> CreateDp2SynchronousAsync(System.Guid systemId, string meddelelseId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (meddelelseId == null)
                throw new System.ArgumentNullException("meddelelseId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "dp2/afsendersystem/{systemId}/afsendelser/{meddelelseId}"
                    urlBuilder_.Append("dp2/afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/afsendelser/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(meddelelseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Receives DP xml message and validates it asynchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FejlType> CreateDpAsynchronousAsync(System.Guid systemId, string meddelelseId, string body)
        {
            return CreateDpAsynchronousAsync(systemId, meddelelseId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Receives DP xml message and validates it asynchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FejlType> CreateDpAsynchronousAsync(System.Guid systemId, string meddelelseId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (meddelelseId == null)
                throw new System.ArgumentNullException("meddelelseId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "dp/afsendersystem/{systemId}/masseafsendelser/{meddelelseId}"
                    urlBuilder_.Append("dp/afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/masseafsendelser/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(meddelelseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Receives DP xml message and validates it synchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FejlType> CreateDpSynchronousAsync(System.Guid systemId, string meddelelseId, string body)
        {
            return CreateDpSynchronousAsync(systemId, meddelelseId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Receives DP xml message and validates it synchronously
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FejlType> CreateDpSynchronousAsync(System.Guid systemId, string meddelelseId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            if (meddelelseId == null)
                throw new System.ArgumentNullException("meddelelseId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/xml");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "dp/afsendersystem/{systemId}/afsendelser/{meddelelseId}"
                    urlBuilder_.Append("dp/afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/afsendelser/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(meddelelseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FejlType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FejlType>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns a bulk receipt collection as a MasseforsendelseKvitteringSamlingType
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> FetchBulkReceiptCollectionAsync(System.Guid systemId)
        {
            return FetchBulkReceiptCollectionAsync(systemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a bulk receipt collection as a MasseforsendelseKvitteringSamlingType
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> FetchBulkReceiptCollectionAsync(System.Guid systemId, System.Threading.CancellationToken cancellationToken)
        {
            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "afsendersystem/{systemId}/masseafsendelser/kvitteringsliste/"
                    urlBuilder_.Append("afsendersystem/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/masseafsendelser/kvitteringsliste/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 201)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<FileResponse>("Service unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Runs a validation on provided resource. Currently only text/html validation is supported. ErrorMessage object is used as response entity and the code will state approved or rejected.
        /// </remarks>
        /// <param name="fileName">The name of the file to validate</param>
        /// <param name="policy">The validation policy that can the content should be validated against, can be STRICT or LENIENT (default)</param>
        /// <param name="content_Length">Size of input.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ErrorMessage> ValidateAsync(string fileName, string policy, object content_Length, Body body)
        {
            return ValidateAsync(fileName, policy, content_Length, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Runs a validation on provided resource. Currently only text/html validation is supported. ErrorMessage object is used as response entity and the code will state approved or rejected.
        /// </remarks>
        /// <param name="fileName">The name of the file to validate</param>
        /// <param name="policy">The validation policy that can the content should be validated against, can be STRICT or LENIENT (default)</param>
        /// <param name="content_Length">Size of input.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ErrorMessage> ValidateAsync(string fileName, string policy, object content_Length, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (content_Length == null)
                        throw new System.ArgumentNullException("content_Length");
                    request_.Headers.TryAddWithoutValidation("Content-Length", ConvertToString(content_Length, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/html");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "validations/"
                    urlBuilder_.Append("validations/");
                    urlBuilder_.Append('?');
                    if (fileName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fileName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (policy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("policy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(policy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query event information
        /// </remarks>
        /// <param name="dateFrom">Used to search for messages created on or after this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <param name="senderOrRecipientSystem">used to get all events send to or received by a system</param>
        /// <param name="senderOrRecipient">Used to get all events send to or received by user.</param>
        /// <param name="ownerOrActor_">Used to narrow down search to single user context, if the user has access to multiple users.</param>
        /// <param name="dateTo">Used to search for messages created on or before this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <param name="eventTag">Used to search for messages matching a certain description.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EventLogSearchResult> QueryEventsAsync(object dateFrom, object senderOrRecipientSystem, object senderOrRecipient, object ownerOrActor_, object dateTo, object eventTag, object any, object searchParameters, object fields, object page, object size, object sortFields)
        {
            return QueryEventsAsync(dateFrom, senderOrRecipientSystem, senderOrRecipient, ownerOrActor_, dateTo, eventTag, any, searchParameters, fields, page, size, sortFields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query event information
        /// </remarks>
        /// <param name="dateFrom">Used to search for messages created on or after this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <param name="senderOrRecipientSystem">used to get all events send to or received by a system</param>
        /// <param name="senderOrRecipient">Used to get all events send to or received by user.</param>
        /// <param name="ownerOrActor_">Used to narrow down search to single user context, if the user has access to multiple users.</param>
        /// <param name="dateTo">Used to search for messages created on or before this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <param name="eventTag">Used to search for messages matching a certain description.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EventLogSearchResult> QueryEventsAsync(object dateFrom, object senderOrRecipientSystem, object senderOrRecipient, object ownerOrActor_, object dateTo, object eventTag, object any, object searchParameters, object fields, object page, object size, object sortFields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "events/"
                    urlBuilder_.Append("events/");
                    urlBuilder_.Append('?');
                    if (dateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateFrom")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (senderOrRecipientSystem != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("senderOrRecipientSystem")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(senderOrRecipientSystem, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (senderOrRecipient != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("senderOrRecipient")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(senderOrRecipient, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ownerOrActor_ != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ownerOrActor ")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ownerOrActor_, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateTo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateTo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (eventTag != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("eventTag")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(eventTag, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventLogSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventLogSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<EventLogSearchResult>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventLogSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<EventLogSearchResult>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Verify the given CPR is matched with the citizen user in the token.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CPRValidation> ValidateCPRAsync(CPRValidationCommand body)
        {
            return ValidateCPRAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Verify the given CPR is matched with the citizen user in the token.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CPRValidation> ValidateCPRAsync(CPRValidationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identities/validation/cpr"
                    urlBuilder_.Append("identities/validation/cpr");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CPRValidation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get all direct privileges for a grantee. Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be.
        /// </remarks>
        /// <param name="issuer">One or more Identity IDs</param>
        /// <param name="scope">One or more Identity IDs</param>
        /// <param name="type">One or more Privilege types</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DirectPrivilegeSearchResult> QueryDirectPrivilegesAsync(System.Guid identityId, object issuer, object scope, object type, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryDirectPrivilegesAsync(identityId, issuer, scope, type, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get all direct privileges for a grantee. Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be.
        /// </remarks>
        /// <param name="issuer">One or more Identity IDs</param>
        /// <param name="scope">One or more Identity IDs</param>
        /// <param name="type">One or more Privilege types</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DirectPrivilegeSearchResult> QueryDirectPrivilegesAsync(System.Guid identityId, object issuer, object scope, object type, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "privileges/direct/grantee/{identityId}"
                    urlBuilder_.Append("privileges/direct/grantee/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (issuer != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issuer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(issuer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scope != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scope")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DirectPrivilegeSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create identity group
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityGroup> CreateIdentityGroupAsync(IdentityGroup body)
        {
            return CreateIdentityGroupAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create identity group
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityGroup> CreateIdentityGroupAsync(IdentityGroup body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/"
                    urlBuilder_.Append("identity-groups/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get all identity groups. Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityGroupSearchResult> QueryIdentityGroupsAsync(object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryIdentityGroupsAsync(page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get all identity groups. Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityGroupSearchResult> QueryIdentityGroupsAsync(object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityGroupSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="id">One or more Identity IDs</param>
        /// <param name="cprNumber">One or more Identity CPR numbers</param>
        /// <param name="type">One or more Identity types</param>
        /// <param name="cvrNumber">One or more Identity CVR numbers</param>
        /// <param name="ridNumber">One or more Identity employee RID-number</param>
        /// <param name="clientId">One or more Identity client IDs</param>
        /// <param name="filterContextId">One or more filter context IDs</param>
        /// <param name="rightsAdmin">One or more filter rights admin Identity</param>
        /// <param name="status">One or more Identity status</param>
        /// <param name="lastUpdated">Last updated date</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentitySearchResult> QueryIdentitiesAsync(object id, object cprNumber, object type, object cvrNumber, object ridNumber, object clientId, object filterContextId, object rightsAdmin, object status, object lastUpdated, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryIdentitiesAsync(id, cprNumber, type, cvrNumber, ridNumber, clientId, filterContextId, rightsAdmin, status, lastUpdated, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="id">One or more Identity IDs</param>
        /// <param name="cprNumber">One or more Identity CPR numbers</param>
        /// <param name="type">One or more Identity types</param>
        /// <param name="cvrNumber">One or more Identity CVR numbers</param>
        /// <param name="ridNumber">One or more Identity employee RID-number</param>
        /// <param name="clientId">One or more Identity client IDs</param>
        /// <param name="filterContextId">One or more filter context IDs</param>
        /// <param name="rightsAdmin">One or more filter rights admin Identity</param>
        /// <param name="status">One or more Identity status</param>
        /// <param name="lastUpdated">Last updated date</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentitySearchResult> QueryIdentitiesAsync(object id, object cprNumber, object type, object cvrNumber, object ridNumber, object clientId, object filterContextId, object rightsAdmin, object status, object lastUpdated, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identities/"
                    urlBuilder_.Append("identities/");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cprNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cprNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cprNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvrNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvrNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ridNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ridNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ridNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (clientId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterContextId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filterContextId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterContextId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (rightsAdmin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rightsAdmin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rightsAdmin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lastUpdated, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentitySearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch identity group information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityGroup> FetchIdentityGroupAsync(System.Guid id)
        {
            return FetchIdentityGroupAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch identity group information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityGroup> FetchIdentityGroupAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update identity group information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityGroup> UpdateIdentityGroupAsync(ETag if_Match, System.Guid id, IdentityGroup body)
        {
            return UpdateIdentityGroupAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update identity group information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityGroup> UpdateIdentityGroupAsync(ETag if_Match, System.Guid id, IdentityGroup body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete identity group
        /// </remarks>
        /// <returns>Identity group deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteIdentityGroupAsync(ETag if_Match, System.Guid id)
        {
            return DeleteIdentityGroupAsync(if_Match, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete identity group
        /// </remarks>
        /// <returns>Identity group deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteIdentityGroupAsync(ETag if_Match, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update identity privilege information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityPrivilege> UpdateIdentityPrivilegeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id, IdentityPrivilege body)
        {
            return UpdateIdentityPrivilegeAsync(if_Match, identityGroupId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update identity privilege information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityPrivilege> UpdateIdentityPrivilegeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id, IdentityPrivilege body, System.Threading.CancellationToken cancellationToken)
        {
            if (identityGroupId == null)
                throw new System.ArgumentNullException("identityGroupId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{identityGroupId}/privileges/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityGroupId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/privileges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityPrivilege>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete identity privilege
        /// </remarks>
        /// <returns>Identity deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteIdentityPrivilegeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id)
        {
            return DeleteIdentityPrivilegeAsync(if_Match, identityGroupId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete identity privilege
        /// </remarks>
        /// <returns>Identity deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteIdentityPrivilegeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (identityGroupId == null)
                throw new System.ArgumentNullException("identityGroupId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{identityGroupId}/privileges/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityGroupId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/privileges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update grantee information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Grantee> UpdateGranteeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id, Grantee body)
        {
            return UpdateGranteeAsync(if_Match, identityGroupId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update grantee information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Grantee> UpdateGranteeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id, Grantee body, System.Threading.CancellationToken cancellationToken)
        {
            if (identityGroupId == null)
                throw new System.ArgumentNullException("identityGroupId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{identityGroupId}/grantees/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityGroupId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/grantees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Grantee>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete grantee
        /// </remarks>
        /// <returns>Identity deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteGranteeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id)
        {
            return DeleteGranteeAsync(if_Match, identityGroupId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete grantee
        /// </remarks>
        /// <returns>Identity deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteGranteeAsync(ETag if_Match, System.Guid identityGroupId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (identityGroupId == null)
                throw new System.ArgumentNullException("identityGroupId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{identityGroupId}/grantees/{id}"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityGroupId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/grantees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get identity
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity> Fetch_2Async(System.Guid id)
        {
            return Fetch_2Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get identity
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity> Fetch_2Async(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identities/{id}"
                    urlBuilder_.Append("identities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update identity
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity> UpdateAsync(ETag if_Match, System.Guid id, Identity body)
        {
            return UpdateAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update identity
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity> UpdateAsync(ETag if_Match, System.Guid id, Identity body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identities/{id}"
                    urlBuilder_.Append("identities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Verify Identity Email subscription and update verification time
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Identity> VerifyIdentityEmailSubscriptionAsync(System.Guid identityId, IdentityEmailSubscriptionVerificationCommand body)
        {
            return VerifyIdentityEmailSubscriptionAsync(identityId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Verify Identity Email subscription and update verification time
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Identity> VerifyIdentityEmailSubscriptionAsync(System.Guid identityId, IdentityEmailSubscriptionVerificationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identities/{identityId}/verification"
                    urlBuilder_.Append("identities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/verification");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Identity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Adding or removing multiple direct privileges in a single request. In successful response, only created privileges will be returned in the response body regardless of whether the privileges to remove are specified in the requestIf at least one operation (add/delete) is failed during processing then the request will fail and all executed operations will be rolled backThe bulk request can have a maximum of 100 privileges to create AND another 100 privileges for removal
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DirectPrivilege>> CreateAndRevokeDirectPrivilegesInBulkAsync(BulkDirectPrivileges body)
        {
            return CreateAndRevokeDirectPrivilegesInBulkAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Adding or removing multiple direct privileges in a single request. In successful response, only created privileges will be returned in the response body regardless of whether the privileges to remove are specified in the requestIf at least one operation (add/delete) is failed during processing then the request will fail and all executed operations will be rolled backThe bulk request can have a maximum of 100 privileges to create AND another 100 privileges for removal
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DirectPrivilege>> CreateAndRevokeDirectPrivilegesInBulkAsync(BulkDirectPrivileges body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "privileges/direct/bulk"
                    urlBuilder_.Append("privileges/direct/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DirectPrivilege>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Issue appointed/direct identity privilege, utilizing the default group for the grantee. Intended for internal usage only!
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DirectPrivilege> CreateDirectPrivilegeAsync(DirectPrivilege body)
        {
            return CreateDirectPrivilegeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Issue appointed/direct identity privilege, utilizing the default group for the grantee. Intended for internal usage only!
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DirectPrivilege> CreateDirectPrivilegeAsync(DirectPrivilege body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "privileges/direct/"
                    urlBuilder_.Append("privileges/direct/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DirectPrivilege>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create identity privilege
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IdentityPrivilege> CreateIdentityPrivilegeAsync(System.Guid identityGroupId, IdentityPrivilege body)
        {
            return CreateIdentityPrivilegeAsync(identityGroupId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create identity privilege
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityPrivilege> CreateIdentityPrivilegeAsync(System.Guid identityGroupId, IdentityPrivilege body, System.Threading.CancellationToken cancellationToken)
        {
            if (identityGroupId == null)
                throw new System.ArgumentNullException("identityGroupId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{identityGroupId}/privileges/"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityGroupId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/privileges/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityPrivilege>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create grantee
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Grantee> CreateGranteeAsync(System.Guid identityGroupId, Grantee body)
        {
            return CreateGranteeAsync(identityGroupId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create grantee
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Grantee> CreateGranteeAsync(System.Guid identityGroupId, Grantee body, System.Threading.CancellationToken cancellationToken)
        {
            if (identityGroupId == null)
                throw new System.ArgumentNullException("identityGroupId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "identity-groups/{identityGroupId}/grantees/"
                    urlBuilder_.Append("identity-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(identityGroupId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/grantees/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Grantee>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete direct privilege
        /// </remarks>
        /// <returns>Direct privilege deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteDirectPrivilegeAsync(ETag if_Match, System.Guid id, DirectPrivilegeRevocation body)
        {
            return DeleteDirectPrivilegeAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete direct privilege
        /// </remarks>
        /// <returns>Direct privilege deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteDirectPrivilegeAsync(ETag if_Match, System.Guid id, DirectPrivilegeRevocation body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "privileges/direct/{id}"
                    urlBuilder_.Append("privileges/direct/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// List of all available privilege types, which can be granted by the calling user in any scope if not filtered.
        /// </remarks>
        /// <param name="scopeIdentityId">Scope Identity ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ListPrivilegeTypesAsync(object scopeIdentityId)
        {
            return ListPrivilegeTypesAsync(scopeIdentityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// List of all available privilege types, which can be granted by the calling user in any scope if not filtered.
        /// </remarks>
        /// <param name="scopeIdentityId">Scope Identity ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ListPrivilegeTypesAsync(object scopeIdentityId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "privilege-types/"
                    urlBuilder_.Append("privilege-types/");
                    urlBuilder_.Append('?');
                    if (scopeIdentityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scopeIdentityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scopeIdentityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch exemption
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exemption> FetchExemptionAsync(System.Guid id)
        {
            return FetchExemptionAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch exemption
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exemption> FetchExemptionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "exemptions/{id}"
                    urlBuilder_.Append("exemptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exemption>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update exemption
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exemption> UpdateExemptionAsync(ETag if_Match, System.Guid id, ExemptionCommand body)
        {
            return UpdateExemptionAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update exemption
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exemption> UpdateExemptionAsync(ETag if_Match, System.Guid id, ExemptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "exemptions/{id}"
                    urlBuilder_.Append("exemptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exemption>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete exemption
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteExemptionAsync(ETag if_Match, System.Guid id)
        {
            return DeleteExemptionAsync(if_Match, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete exemption
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteExemptionAsync(ETag if_Match, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "exemptions/{id}"
                    urlBuilder_.Append("exemptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create exemption
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Exemption> CreateExemptionAsync(ExemptionCommand body)
        {
            return CreateExemptionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create exemption
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Exemption> CreateExemptionAsync(ExemptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "exemptions/"
                    urlBuilder_.Append("exemptions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Exemption>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create File
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<File> CreateFileAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, File body)
        {
            return CreateFileAsync(mailboxId, messageId, documentId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create File
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<File> CreateFileAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, File body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<File>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get list of files in a document. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileListResult> ListFilesAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId)
        {
            return ListFilesAsync(mailboxId, messageId, documentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get list of files in a document. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileListResult> ListFilesAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create Document
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Document> CreateDocumentAsync(System.Guid mailboxId, System.Guid messageId, Document body)
        {
            return CreateDocumentAsync(mailboxId, messageId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create Document
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Document> CreateDocumentAsync(System.Guid mailboxId, System.Guid messageId, Document body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get list of documents from a message. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DocumentListResult> ListDocumentsAsync(System.Guid mailboxId, System.Guid messageId)
        {
            return ListDocumentsAsync(mailboxId, messageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get list of documents from a message. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentListResult> ListDocumentsAsync(System.Guid mailboxId, System.Guid messageId, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create Message
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> CreateMessageAsync(System.Guid mailboxId, Message body)
        {
            return CreateMessageAsync(mailboxId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create Message
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> CreateMessageAsync(System.Guid mailboxId, Message body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="folderId">Id of folder to filter by</param>
        /// <param name="dateFrom">Used to search for messages created on or after this date. Format: yyyy-MM-dd.</param>
        /// <param name="dateTo">Used to search for messages created on or before this date. Format: yyyy-MM-dd.</param>
        /// <param name="receivedDateFrom">Used to search for messages received on or after this date. Format: yyyy-MM-dd.</param>
        /// <param name="receivedDateTo">Used to search for messages received on or before this date. Format: yyyy-MM-dd.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageSearchResult> QueryMessagesAsync(System.Guid mailboxId, object folderId, object dateFrom, object dateTo, object receivedDateFrom, object receivedDateTo, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryMessagesAsync(mailboxId, folderId, dateFrom, dateTo, receivedDateFrom, receivedDateTo, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Resources gotten from this path and method (GET) is only eventually consistent with resources from unsafe methods. This means that after a POST, PUT, PATCH, or DELETE the state change might not be immediately available for this type of querying, but it will eventually be. GET using id for fetching a single resource will always be consistent, if externally routed, though.
        /// </remarks>
        /// <param name="folderId">Id of folder to filter by</param>
        /// <param name="dateFrom">Used to search for messages created on or after this date. Format: yyyy-MM-dd.</param>
        /// <param name="dateTo">Used to search for messages created on or before this date. Format: yyyy-MM-dd.</param>
        /// <param name="receivedDateFrom">Used to search for messages received on or after this date. Format: yyyy-MM-dd.</param>
        /// <param name="receivedDateTo">Used to search for messages received on or before this date. Format: yyyy-MM-dd.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageSearchResult> QueryMessagesAsync(System.Guid mailboxId, object folderId, object dateFrom, object dateTo, object receivedDateFrom, object receivedDateTo, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateFrom")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateTo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateTo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receivedDateFrom != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receivedDateFrom")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receivedDateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (receivedDateTo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("receivedDateTo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receivedDateTo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// List each folder with a summary of total and unread messages.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FolderMessageSummaryResult> GetFolderMessageSummaryAsync(System.Guid mailboxId)
        {
            return GetFolderMessageSummaryAsync(mailboxId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// List each folder with a summary of total and unread messages.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FolderMessageSummaryResult> GetFolderMessageSummaryAsync(System.Guid mailboxId, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/folders/summary/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/folders/summary/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FolderMessageSummaryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create Folder
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Folder> CreateFolderAsync(System.Guid mailboxId, Folder body)
        {
            return CreateFolderAsync(mailboxId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create Folder
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Folder> CreateFolderAsync(System.Guid mailboxId, Folder body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/folders/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/folders/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Folder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FolderSearchResult> QueryFoldersAsync(System.Guid mailboxId, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryFoldersAsync(mailboxId, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FolderSearchResult> QueryFoldersAsync(System.Guid mailboxId, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/folders/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/folders/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FolderSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create Access
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Access> CreateAccessAsync(System.Guid mailboxId, Access body)
        {
            return CreateAccessAsync(mailboxId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create Access
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Access> CreateAccessAsync(System.Guid mailboxId, Access body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/accesses/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accesses/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Access>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessSearchResult> QueryAccessAsync(System.Guid mailboxId, object page, object size, object sortFields)
        {
            return QueryAccessAsync(mailboxId, page, size, sortFields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessSearchResult> QueryAccessAsync(System.Guid mailboxId, object page, object size, object sortFields, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/accesses/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accesses/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets list of sender statistics. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SenderInformationResult> GetSenderInformationAsync(System.Guid id)
        {
            return GetSenderInformationAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets list of sender statistics. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SenderInformationResult> GetSenderInformationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{id}/sender-information/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sender-information/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SenderInformationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query for the existence of unread messages using owner identifier. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="ownerId">Owner identifier - either CPR (10 digits), or CVR (8 digits).</param>
        /// <param name="ownerIdType">States what ownerId contains.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Unread> ExistsUnreadAsync(object ownerId, object ownerIdType)
        {
            return ExistsUnreadAsync(ownerId, ownerIdType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query for the existence of unread messages using owner identifier. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="ownerId">Owner identifier - either CPR (10 digits), or CVR (8 digits).</param>
        /// <param name="ownerIdType">States what ownerId contains.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Unread> ExistsUnreadAsync(object ownerId, object ownerIdType, System.Threading.CancellationToken cancellationToken)
        {
            if (ownerId == null)
                throw new System.ArgumentNullException("ownerId");

            if (ownerIdType == null)
                throw new System.ArgumentNullException("ownerIdType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/messages/unread/exists/"
                    urlBuilder_.Append("mailboxes/messages/unread/exists/");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ownerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ownerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ownerIdType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ownerIdType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Unread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MailboxSearchResult> QueryMailboxesAsync(object page, object size, object sortFields)
        {
            return QueryMailboxesAsync(page, size, sortFields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailboxSearchResult> QueryMailboxesAsync(object page, object size, object sortFields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailboxSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch SystemFetch
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SystemFetch> FetchSystemFetchAsync(System.Guid mailboxId, System.Guid id)
        {
            return FetchSystemFetchAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch SystemFetch
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemFetch> FetchSystemFetchAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/system-fetches/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/system-fetches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemFetch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update SystemFetch
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SystemFetch> UpdateSystemFetchAsync(System.Guid mailboxId, System.Guid id, SystemFetch body)
        {
            return UpdateSystemFetchAsync(mailboxId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update SystemFetch
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemFetch> UpdateSystemFetchAsync(System.Guid mailboxId, System.Guid id, SystemFetch body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/system-fetches/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/system-fetches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemFetch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete SystemFetch
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteSystemFetchAsync(System.Guid mailboxId, System.Guid id)
        {
            return DeleteSystemFetchAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete SystemFetch
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSystemFetchAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/system-fetches/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/system-fetches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch Document
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Document> FetchDocumentAsync(System.Guid mailboxId, System.Guid messageId, System.Guid id)
        {
            return FetchDocumentAsync(mailboxId, messageId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch Document
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Document> FetchDocumentAsync(System.Guid mailboxId, System.Guid messageId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update Document
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Document> UpdateDocumentAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid id, Document body)
        {
            return UpdateDocumentAsync(if_Match, mailboxId, messageId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update Document
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Document> UpdateDocumentAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid id, Document body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete Document
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteDocumentAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid id)
        {
            return DeleteDocumentAsync(if_Match, mailboxId, messageId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete Document
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteDocumentAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch File
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<File> FetchFileAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id)
        {
            return FetchFileAsync(mailboxId, messageId, documentId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch File
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<File> FetchFileAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<File>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update File
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<File> UpdateFileAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, File body)
        {
            return UpdateFileAsync(if_Match, mailboxId, messageId, documentId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update File
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<File> UpdateFileAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, File body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<File>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete File
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteFileAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id)
        {
            return DeleteFileAsync(if_Match, mailboxId, messageId, documentId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete File
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteFileAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch file content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> FetchFileContentAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id)
        {
            return FetchFileContentAsync(mailboxId, messageId, documentId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch file content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> FetchFileContentAsync(System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/{id}/content"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update File content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileContent> UpdateFileContentAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, FileParameter file)
        {
            return UpdateFileContentAsync(if_Match, mailboxId, messageId, documentId, id, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update File content
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileContent> UpdateFileContentAsync(ETag if_Match, System.Guid mailboxId, System.Guid messageId, System.Guid documentId, System.Guid id, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (documentId == null)
                throw new System.ArgumentNullException("documentId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{messageId}/documents/{documentId}/files/{id}/content"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> FetchMessageAsync(System.Guid mailboxId, System.Guid id)
        {
            return FetchMessageAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> FetchMessageAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> UpdateMessageAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, Message body)
        {
            return UpdateMessageAsync(if_Match, mailboxId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> UpdateMessageAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, Message body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete Message
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteMessageAsync(ETag if_Match, System.Guid mailboxId, System.Guid id)
        {
            return DeleteMessageAsync(if_Match, mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete Message
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteMessageAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update one or more of certain predetermined fields of message.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> PatchMessageAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, MessagePatchCommand body)
        {
            return PatchMessageAsync(if_Match, mailboxId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update one or more of certain predetermined fields of message.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> PatchMessageAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, MessagePatchCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Send Message (requires e-tag)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> SendMessageWithVersionCheckAsync(ETag if_Match, System.Guid mailboxId, System.Guid id)
        {
            return SendMessageWithVersionCheckAsync(if_Match, mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Send Message (requires e-tag)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> SendMessageWithVersionCheckAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}/send"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/send");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Send Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> SendMessageAsync(System.Guid mailboxId, System.Guid id)
        {
            return SendMessageAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Send Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> SendMessageAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}/send"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/send");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch Folder
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Folder> FetchFolderAsync(System.Guid mailboxId, System.Guid id)
        {
            return FetchFolderAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch Folder
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Folder> FetchFolderAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/folders/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/folders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Folder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update Folder
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Folder> UpdateFolderAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, Folder body)
        {
            return UpdateFolderAsync(if_Match, mailboxId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update Folder
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Folder> UpdateFolderAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, Folder body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/folders/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/folders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Folder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete Folder
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteFolderAsync(ETag if_Match, System.Guid mailboxId, System.Guid id)
        {
            return DeleteFolderAsync(if_Match, mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete Folder
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteFolderAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/folders/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/folders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch Access
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Access> FetchAccessAsync(System.Guid mailboxId, System.Guid id)
        {
            return FetchAccessAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch Access
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Access> FetchAccessAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/accesses/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accesses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Access>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update Access
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Access> UpdateAccessAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, Access body)
        {
            return UpdateAccessAsync(if_Match, mailboxId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update Access
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Access> UpdateAccessAsync(ETag if_Match, System.Guid mailboxId, System.Guid id, Access body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/accesses/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accesses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Access>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Verify Access subscription and update verification time
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Access> VerifyAccessSubscriptionAsync(System.Guid mailboxId, System.Guid accessId, System.Guid subscriptionId, AccessSubscriptionVerificationCommand body)
        {
            return VerifyAccessSubscriptionAsync(mailboxId, accessId, subscriptionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Verify Access subscription and update verification time
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Access> VerifyAccessSubscriptionAsync(System.Guid mailboxId, System.Guid accessId, System.Guid subscriptionId, AccessSubscriptionVerificationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (accessId == null)
                throw new System.ArgumentNullException("accessId");

            if (subscriptionId == null)
                throw new System.ArgumentNullException("subscriptionId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/accesses/{accessId}/subscriptions/{subscriptionId}/verification"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accesses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accessId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(subscriptionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/verification");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Access>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch Mailbox
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Mailbox> FetchMailboxAsync(System.Guid id)
        {
            return FetchMailboxAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch Mailbox
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Mailbox> FetchMailboxAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Mailbox>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update Mailbox
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Mailbox> UpdateMailboxAsync(ETag if_Match, System.Guid id, Mailbox body)
        {
            return UpdateMailboxAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update Mailbox
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Mailbox> UpdateMailboxAsync(ETag if_Match, System.Guid id, Mailbox body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{id}"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Mailbox>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get SystemFetch list of all system-fetches, either running, stopped or finished, for the mailbox.
        /// </remarks>
        /// <param name="fromDate">Used to determine totalMessages received on or after this date. Format: yyyy-MM-dd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SystemFetchListResult> ListSystemFetchesAsync(System.Guid mailboxId, object fromDate)
        {
            return ListSystemFetchesAsync(mailboxId, fromDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get SystemFetch list of all system-fetches, either running, stopped or finished, for the mailbox.
        /// </remarks>
        /// <param name="fromDate">Used to determine totalMessages received on or after this date. Format: yyyy-MM-dd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemFetchListResult> ListSystemFetchesAsync(System.Guid mailboxId, object fromDate, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/system-fetches/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/system-fetches/");
                    urlBuilder_.Append('?');
                    if (fromDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fromDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemFetchListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create SystemFetch
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SystemFetch> CreateSystemFetchAsync(System.Guid mailboxId, SystemFetch body)
        {
            return CreateSystemFetchAsync(mailboxId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create SystemFetch
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemFetch> CreateSystemFetchAsync(System.Guid mailboxId, SystemFetch body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/system-fetches/"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/system-fetches/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemFetch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Reply to Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> ReplyToMessageAsync(System.Guid mailboxId, System.Guid id)
        {
            return ReplyToMessageAsync(mailboxId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Reply to Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> ReplyToMessageAsync(System.Guid mailboxId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}/reply"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reply");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Forward Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> ForwardMessageAsync(System.Guid mailboxId, System.Guid id, ForwardCommand body)
        {
            return ForwardMessageAsync(mailboxId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Forward Message
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> ForwardMessageAsync(System.Guid mailboxId, System.Guid id, ForwardCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/messages/{id}/forward"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/forward");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns total amount of fetchable messages
        /// </remarks>
        /// <param name="fromDateTime">Used to determine totalMessages received on or after this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <param name="toDateTime">Used to determine totalMessages received on or before this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SystemFetchListResult> MessageCountAsync(System.Guid mailboxId, object fromDateTime, object toDateTime)
        {
            return MessageCountAsync(mailboxId, fromDateTime, toDateTime, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns total amount of fetchable messages
        /// </remarks>
        /// <param name="fromDateTime">Used to determine totalMessages received on or after this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <param name="toDateTime">Used to determine totalMessages received on or before this date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemFetchListResult> MessageCountAsync(System.Guid mailboxId, object fromDateTime, object toDateTime, System.Threading.CancellationToken cancellationToken)
        {
            if (mailboxId == null)
                throw new System.ArgumentNullException("mailboxId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/{mailboxId}/system-fetches/message-count"
                    urlBuilder_.Append("mailboxes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mailboxId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/system-fetches/message-count");
                    urlBuilder_.Append('?');
                    if (fromDateTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fromDateTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fromDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (toDateTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("toDateTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(toDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemFetchListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query Trustees
        /// </remarks>
        /// <param name="sortField">Field to sort by. Either name, id or idType.</param>
        /// <param name="sortOrder">Sort order for the sortField. Either asc or desc.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TrusteeSearchResult> QueryTrusteesAsync(object sortField, object sortOrder)
        {
            return QueryTrusteesAsync(sortField, sortOrder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query Trustees
        /// </remarks>
        /// <param name="sortField">Field to sort by. Either name, id or idType.</param>
        /// <param name="sortOrder">Sort order for the sortField. Either asc or desc.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TrusteeSearchResult> QueryTrusteesAsync(object sortField, object sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mailboxes/trustees"
                    urlBuilder_.Append("mailboxes/trustees");
                    urlBuilder_.Append('?');
                    if (sortField != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortField")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortField, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TrusteeSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create mailSystem
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MailSystem> CreateMailSystemAsync(System.Guid organisationId, MailSystemCommand body)
        {
            return CreateMailSystemAsync(organisationId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create mailSystem
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailSystem> CreateMailSystemAsync(System.Guid organisationId, MailSystemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailSystem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="certificateSerialNumber">Search for a certificate serial number</param>
        /// <param name="authenticationToken">Search for an authentication token</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SystemSearchResult> QuerySystemsAsync(System.Guid organisationId, object certificateSerialNumber, object authenticationToken, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QuerySystemsAsync(organisationId, certificateSerialNumber, authenticationToken, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="certificateSerialNumber">Search for a certificate serial number</param>
        /// <param name="authenticationToken">Search for an authentication token</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemSearchResult> QuerySystemsAsync(System.Guid organisationId, object certificateSerialNumber, object authenticationToken, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append('?');
                    if (certificateSerialNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("certificateSerialNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(certificateSerialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (authenticationToken != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("authenticationToken")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(authenticationToken, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create contactPoint
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactPoint> CreateContactPointAsync(System.Guid organisationId, ContactPointCommand body)
        {
            return CreateContactPointAsync(organisationId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create contactPoint
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactPoint> CreateContactPointAsync(System.Guid organisationId, ContactPointCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-points/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-points/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactPoint>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="searchTerm">One or more Search Term</param>
        /// <param name="searchTermOrName">One or more Search Term or names. Input will be queried for in searchTerm OR name.</param>
        /// <param name="contactGroupId">Search for contact-points directly associated with contact-groups</param>
        /// <param name="isRoot">Get all root contact-points. Here the root is considered as all contact-points that are not associated with any contact-groups.</param>
        /// <param name="visibility">Option to include/exclude hidden contact-points. Valid types: VISIBLE, HIDDEN, ALL.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactPointSearchResult> QueryContactPointsAsync(System.Guid organisationId, object searchTerm, object searchTermOrName, object contactGroupId, object isRoot, object visibility, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryContactPointsAsync(organisationId, searchTerm, searchTermOrName, contactGroupId, isRoot, visibility, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="searchTerm">One or more Search Term</param>
        /// <param name="searchTermOrName">One or more Search Term or names. Input will be queried for in searchTerm OR name.</param>
        /// <param name="contactGroupId">Search for contact-points directly associated with contact-groups</param>
        /// <param name="isRoot">Get all root contact-points. Here the root is considered as all contact-points that are not associated with any contact-groups.</param>
        /// <param name="visibility">Option to include/exclude hidden contact-points. Valid types: VISIBLE, HIDDEN, ALL.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactPointSearchResult> QueryContactPointsAsync(System.Guid organisationId, object searchTerm, object searchTermOrName, object contactGroupId, object isRoot, object visibility, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-points/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-points/");
                    urlBuilder_.Append('?');
                    if (searchTerm != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchTerm")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchTermOrName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchTermOrName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTermOrName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (contactGroupId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("contactGroupId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactGroupId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isRoot != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isRoot")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isRoot, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (visibility != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("visibility")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(visibility, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactPointSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create contactGroup
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactGroup> CreateContactGroupAsync(System.Guid organisationId, ContactGroupCommand body)
        {
            return CreateContactGroupAsync(organisationId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create contactGroup
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactGroup> CreateContactGroupAsync(System.Guid organisationId, ContactGroupCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-groups/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-groups/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="isRoot">Get all root contact-groups. Here the root is considered as all contact-groups that do not have a parent.</param>
        /// <param name="visibility">Option to include/exclude hidden contact-groups. Valid types: VISIBLE, HIDDEN, ALL.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactGroupSearchResult> QueryContactGroupsAsync(System.Guid organisationId, object isRoot, object visibility, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryContactGroupsAsync(organisationId, isRoot, visibility, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="isRoot">Get all root contact-groups. Here the root is considered as all contact-groups that do not have a parent.</param>
        /// <param name="visibility">Option to include/exclude hidden contact-groups. Valid types: VISIBLE, HIDDEN, ALL.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactGroupSearchResult> QueryContactGroupsAsync(System.Guid organisationId, object isRoot, object visibility, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-groups/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-groups/");
                    urlBuilder_.Append('?');
                    if (isRoot != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isRoot")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isRoot, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (visibility != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("visibility")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(visibility, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactGroupSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="name">Name of organisation</param>
        /// <param name="type">Type of organisation</param>
        /// <param name="cvrNumber">One or more Cvr numbers</param>
        /// <param name="searchTerm">One or more search terms to query for</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrganisationSearchResult> QueryOrganisationsAsync(object name, object type, object cvrNumber, object searchTerm, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryOrganisationsAsync(name, type, cvrNumber, searchTerm, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="name">Name of organisation</param>
        /// <param name="type">Type of organisation</param>
        /// <param name="cvrNumber">One or more Cvr numbers</param>
        /// <param name="searchTerm">One or more search terms to query for</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganisationSearchResult> QueryOrganisationsAsync(object name, object type, object cvrNumber, object searchTerm, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvrNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvrNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvrNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchTerm != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchTerm")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganisationSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganisationSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<OrganisationSearchResult>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganisationSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<OrganisationSearchResult>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="searchTerm">One or more Search Term</param>
        /// <param name="searchTermOrName">One or more Search Term or names. Input will be queried for in searchTerm OR name.</param>
        /// <param name="contactGroupId">Search for contact-points directly associated with contact-groups</param>
        /// <param name="isRoot">Get all root contact-points. Here the root is considered as all contact-points that are not associated with any contact-groups.</param>
        /// <param name="postkasseId">PostkasseId, one of the identifiers used in translation from DP/DP2</param>
        /// <param name="postkasseEmneId">PostkasseEmneId, one of the identifiers used in translation from DP/DP2</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactPointSearchResult> QueryAllContactPointsAsync(object searchTerm, object searchTermOrName, object contactGroupId, object isRoot, object postkasseId, object postkasseEmneId, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryAllContactPointsAsync(searchTerm, searchTermOrName, contactGroupId, isRoot, postkasseId, postkasseEmneId, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="searchTerm">One or more Search Term</param>
        /// <param name="searchTermOrName">One or more Search Term or names. Input will be queried for in searchTerm OR name.</param>
        /// <param name="contactGroupId">Search for contact-points directly associated with contact-groups</param>
        /// <param name="isRoot">Get all root contact-points. Here the root is considered as all contact-points that are not associated with any contact-groups.</param>
        /// <param name="postkasseId">PostkasseId, one of the identifiers used in translation from DP/DP2</param>
        /// <param name="postkasseEmneId">PostkasseEmneId, one of the identifiers used in translation from DP/DP2</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactPointSearchResult> QueryAllContactPointsAsync(object searchTerm, object searchTermOrName, object contactGroupId, object isRoot, object postkasseId, object postkasseEmneId, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contact-points/"
                    urlBuilder_.Append("contact-points/");
                    urlBuilder_.Append('?');
                    if (searchTerm != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchTerm")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchTermOrName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchTermOrName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTermOrName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (contactGroupId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("contactGroupId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactGroupId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isRoot != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isRoot")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isRoot, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postkasseId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postkasseId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postkasseId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postkasseEmneId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postkasseEmneId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postkasseEmneId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactPointSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="name">The name of the contact-group</param>
        /// <param name="isRoot">Get all root contact-groups. Here the root is considered as all contact-groups that do not have a parent.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactGroupSearchResult> QueryAllContactGroupsAsync(object name, object isRoot, object page, object size, object sortFields, object any, object searchParameters, object fields)
        {
            return QueryAllContactGroupsAsync(name, isRoot, page, size, sortFields, any, searchParameters, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Query using filters, searches, sorts, and paging, or a combination of these. Data from this endpoint is only eventually consistent with data from other endpoints. This means that after a POST, PUT, PATCH, or DELETE the change might not be immediately available for querying.
        /// </remarks>
        /// <param name="name">The name of the contact-group</param>
        /// <param name="isRoot">Get all root contact-groups. Here the root is considered as all contact-groups that do not have a parent.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sortFields">Specify of one or more fields from the resource that you want to use as sort fields. Sort order (asc or desc) can be appended to field name separated by a colon. If no sort order is given it defaults to asc. Fields may be nested using dot notation. Eg. "/?sortFields=createdDateTime:asc,label:desc" - sorts the result on field createdDateTime ascending followed by sort using label descending.</param>
        /// <param name="any">One or more search parameters to search across all fields in the resource. Wildcards are not supported in this field. Eg. "/?any=Alfa,Bravo" - searches for ‘Alfa' OR 'Bravo’ across all keywords of the resource.</param>
        /// <param name="searchParameters">Specify one or more fields from resource each with one or more search parameters. A field can be a nested field in the resource-structure using dot (.) between the elements. For example recipient.recipientId. If more values a given to a specific field, the matches will be where either match (OR). If more search fields are given, the matches will be where all match (AND). It is possible to query using wildcard using the * character. Eg. "/?label=Alfa*" - returns resources where label starts with Alfa. Eg. "/?recipient.recipientId=Alfa,Bravo&amp;label=Charlie" - returns resources where recipientId is either Alfa OR Bravo AND label is Charlie. This functionality can be  overridden by adding an operator prefixed to the search value. The following is supported: '|' which becomes OR, '&amp;' which becomes AND, '!' which becomes NOT. Examples: "/?param=|alfa,|bravo,!charlie" - equivalent to "/?param=|alfa&amp;param=|bravo&amp;param=!charlie". This operator is currently only available on these generics search parameters, and thus not on the fixed filters the individual endpoint offers. Note! searchParameters as query param is NOT used although specified as name here.</param>
        /// <param name="fields">Specify of one or more fields from the resource that you want returned in the response. This allows you to limit the amount of data that needs to be transmitted over the wire. Eg. "/?fields=id,version" - returns only id and version fields of the found resources.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactGroupSearchResult> QueryAllContactGroupsAsync(object name, object isRoot, object page, object size, object sortFields, object any, object searchParameters, object fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "contact-groups/"
                    urlBuilder_.Append("contact-groups/");
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isRoot != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isRoot")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isRoot, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortFields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortFields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (any != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("any")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(any, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchParameters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactGroupSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch mailSystem
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MailSystem> FetchMailSystemAsync(System.Guid organisationId, System.Guid id)
        {
            return FetchMailSystemAsync(organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch mailSystem
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailSystem> FetchMailSystemAsync(System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailSystem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update mailSystem
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MailSystem> UpdateMailSystemAsync(ETag if_Match, System.Guid organisationId, System.Guid id, MailSystemCommand body)
        {
            return UpdateMailSystemAsync(if_Match, organisationId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update mailSystem
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailSystem> UpdateMailSystemAsync(ETag if_Match, System.Guid organisationId, System.Guid id, MailSystemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailSystem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete System
        /// </remarks>
        /// <returns>System deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteMailSystemAsync(ETag if_Match, System.Guid organisationId, System.Guid id)
        {
            return DeleteMailSystemAsync(if_Match, organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete System
        /// </remarks>
        /// <returns>System deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteMailSystemAsync(ETag if_Match, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch contactPoint information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactPoint> FetchContactPointAsync(System.Guid organisationId, System.Guid id)
        {
            return FetchContactPointAsync(organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch contactPoint information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactPoint> FetchContactPointAsync(System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-points/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-points/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactPoint>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update contactPoint information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactPoint> UpdateContactPointAsync(ETag if_Match, System.Guid organisationId, System.Guid id, ContactPointCommand body)
        {
            return UpdateContactPointAsync(if_Match, organisationId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update contactPoint information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactPoint> UpdateContactPointAsync(ETag if_Match, System.Guid organisationId, System.Guid id, ContactPointCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-points/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-points/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactPoint>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete contact-point
        /// </remarks>
        /// <returns>Contact-point deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteContactPointAsync(ETag if_Match, System.Guid organisationId, System.Guid id)
        {
            return DeleteContactPointAsync(if_Match, organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete contact-point
        /// </remarks>
        /// <returns>Contact-point deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteContactPointAsync(ETag if_Match, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-points/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-points/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch contactGroup information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactGroup> FetchContactGroupAsync(System.Guid organisationId, System.Guid id)
        {
            return FetchContactGroupAsync(organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch contactGroup information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactGroup> FetchContactGroupAsync(System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-groups/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update contactGroup information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactGroup> UpdateContactGroupAsync(ETag if_Match, System.Guid organisationId, System.Guid id, ContactGroupCommand body)
        {
            return UpdateContactGroupAsync(if_Match, organisationId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update contactGroup information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactGroup> UpdateContactGroupAsync(ETag if_Match, System.Guid organisationId, System.Guid id, ContactGroupCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-groups/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactGroup>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete contact-group
        /// </remarks>
        /// <returns>Contact-group deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteContactGroupAsync(ETag if_Match, System.Guid organisationId, System.Guid id)
        {
            return DeleteContactGroupAsync(if_Match, organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete contact-group
        /// </remarks>
        /// <returns>Contact-group deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteContactGroupAsync(ETag if_Match, System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/contact-groups/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contact-groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch organisation
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Organisation> FetchOrganisationAsync(System.Guid id)
        {
            return FetchOrganisationAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch organisation
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Organisation> FetchOrganisationAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Organisation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update organisation
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Organisation> UpdateOrganisationAsync(ETag if_Match, System.Guid id, OrganisationCommand body)
        {
            return UpdateOrganisationAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update organisation
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Organisation> UpdateOrganisationAsync(ETag if_Match, System.Guid id, OrganisationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{id}"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Organisation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch logo
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> FetchLogoAsync(System.Guid id)
        {
            return FetchLogoAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch logo
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> FetchLogoAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/png"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{id}/logo"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/logo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update logo
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Logo> UpdateLogoAsync(ETag if_Match, System.Guid id, FileParameter file)
        {
            return UpdateLogoAsync(if_Match, id, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update logo
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Logo> UpdateLogoAsync(ETag if_Match, System.Guid id, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{id}/logo"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/logo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Logo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete logo
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteLogoAsync(ETag if_Match, System.Guid id)
        {
            return DeleteLogoAsync(if_Match, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete logo
        /// </remarks>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteLogoAsync(ETag if_Match, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{id}/logo"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/logo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Unprocessable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Upload SSH Public Key
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ssh> CreateSshAsync(System.Guid organisationId, System.Guid systemId, FileParameter file)
        {
            return CreateSshAsync(organisationId, systemId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Upload SSH Public Key
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ssh> CreateSshAsync(System.Guid organisationId, System.Guid systemId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{systemId}/sshkey/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sshkey/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ssh>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Upload OCES public certificate
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OcesPublicCertificateCheck> CreateOcesPublicCertificateAsync(System.Guid organisationId, System.Guid systemId, FileParameter file)
        {
            return CreateOcesPublicCertificateAsync(organisationId, systemId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Upload OCES public certificate
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OcesPublicCertificateCheck> CreateOcesPublicCertificateAsync(System.Guid organisationId, System.Guid systemId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (systemId == null)
                throw new System.ArgumentNullException("systemId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{systemId}/certificate/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificate/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OcesPublicCertificateCheck>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Renew API token. Create new API token if not already existed or Update API token value if not existed. Existing OCES certificate will be removed
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MailSystem> RenewApiTokenAsync(System.Guid organisationId, System.Guid id)
        {
            return RenewApiTokenAsync(organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Renew API token. Create new API token if not already existed or Update API token value if not existed. Existing OCES certificate will be removed
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailSystem> RenewApiTokenAsync(System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{id}/renewapitoken"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/renewapitoken");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailSystem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The system was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Change Default receiverSystem, this action will mark the target system af RECIPIENT_DEFAULT and remove the marking on the existing
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MailSystem> ChangeToDefaultRecipientAsync(System.Guid organisationId, System.Guid id)
        {
            return ChangeToDefaultRecipientAsync(organisationId, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Change Default receiverSystem, this action will mark the target system af RECIPIENT_DEFAULT and remove the marking on the existing
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailSystem> ChangeToDefaultRecipientAsync(System.Guid organisationId, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/systems/{id}/makedefaultrecipient"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/makedefaultrecipient");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailSystem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The system was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Checks standalone OCES public certificate for errors
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OcesPublicCertificateCheckResult> CheckOcesPublicCertificateAsync(ProtocolType protocolType, FileParameter file)
        {
            return CheckOcesPublicCertificateAsync(protocolType, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Checks standalone OCES public certificate for errors
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OcesPublicCertificateCheckResult> CheckOcesPublicCertificateAsync(ProtocolType protocolType, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (protocolType == null)
                throw new System.ArgumentNullException("protocolType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/oces-public-certificate/check/{protocolType}"
                    urlBuilder_.Append("organisations/oces-public-certificate/check/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(protocolType, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OcesPublicCertificateCheckResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get standardSystemTemplate list
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StandardSystemTemplateListResult> ListStandardSystemTemplatesAsync()
        {
            return ListStandardSystemTemplatesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get standardSystemTemplate list
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StandardSystemTemplateListResult> ListStandardSystemTemplatesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "standard-system-templates"
                    urlBuilder_.Append("standard-system-templates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StandardSystemTemplateListResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch organisation postkasseEmneIds
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PostkasseEmneIdsSearchResult> FetchPostkasseEmneIdsAsync(System.Guid organisationId, long postkasseId)
        {
            return FetchPostkasseEmneIdsAsync(organisationId, postkasseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch organisation postkasseEmneIds
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PostkasseEmneIdsSearchResult> FetchPostkasseEmneIdsAsync(System.Guid organisationId, long postkasseId, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            if (postkasseId == null)
                throw new System.ArgumentNullException("postkasseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/postkasse-ids/{postkasseId}/postkasse-emne-ids/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/postkasse-ids/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(postkasseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/postkasse-emne-ids/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostkasseEmneIdsSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch organisation postkasseIds
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PostkasseIdsSearchResult> FetchPostkasseIdsAsync(System.Guid organisationId)
        {
            return FetchPostkasseIdsAsync(organisationId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch organisation postkasseIds
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PostkasseIdsSearchResult> FetchPostkasseIdsAsync(System.Guid organisationId, System.Threading.CancellationToken cancellationToken)
        {
            if (organisationId == null)
                throw new System.ArgumentNullException("organisationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/{organisationId}/postkasse-ids/"
                    urlBuilder_.Append("organisations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/postkasse-ids/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostkasseIdsSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The resource was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Fetch material. Legacy support.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Material> FetchMaterialAsync(int id)
        {
            return FetchMaterialAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Fetch material. Legacy support.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Material> FetchMaterialAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "materials/{id}"
                    urlBuilder_.Append("materials/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Material>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("The material was not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update organisation subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrganisationSenderSystemSubscription> UpdateOrganisationSenderSystemSubscriptionAsync(ETag if_Match, System.Guid id, OrganisationSenderSystemSubscriptionCommand body)
        {
            return UpdateOrganisationSenderSystemSubscriptionAsync(if_Match, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update organisation subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganisationSenderSystemSubscription> UpdateOrganisationSenderSystemSubscriptionAsync(ETag if_Match, System.Guid id, OrganisationSenderSystemSubscriptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (if_Match == null)
                        throw new System.ArgumentNullException("if_Match");
                    request_.Headers.TryAddWithoutValidation("If-Match", ConvertToString(if_Match, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/subscriptions/{id}"
                    urlBuilder_.Append("organisations/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganisationSenderSystemSubscription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get organisation subscription information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganisationSenderSystemSubscription>> ListOrganisationSenderSystemSubscriptionsAsync()
        {
            return ListOrganisationSenderSystemSubscriptionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get organisation subscription information
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganisationSenderSystemSubscription>> ListOrganisationSenderSystemSubscriptionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/subscriptions/"
                    urlBuilder_.Append("organisations/subscriptions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganisationSenderSystemSubscription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create organisation subscription
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrganisationSenderSystemSubscription> CreateOrganisationSenderSystemSubscriptionAsync(OrganisationSenderSystemSubscriptionCommand body)
        {
            return CreateOrganisationSenderSystemSubscriptionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create organisation subscription
        /// </remarks>
        /// <returns>CREATED</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganisationSenderSystemSubscription> CreateOrganisationSenderSystemSubscriptionAsync(OrganisationSenderSystemSubscriptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "organisations/subscriptions/"
                    urlBuilder_.Append("organisations/subscriptions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganisationSenderSystemSubscription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Validate the verification with the given token.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LinkValidationResponse> ValidateVerificationStoreFunctionalTestAsync(ValidationLinkCommand body)
        {
            return ValidateVerificationStoreFunctionalTestAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Validate the verification with the given token.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LinkValidationResponse> ValidateVerificationStoreFunctionalTestAsync(ValidationLinkCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "verifications/validation"
                    urlBuilder_.Append("verifications/validation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LinkValidationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorMessage>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The AccessRequest resource is the main resource of the request management store of NgDP.
    /// <br/>An AccessRequest always consists of three participants, even though for some types of AccessRequest, each participant may have same identity.
    /// <br/>We have chosen to do it that way as it gives us a rather flexible and powerful api.
    /// <br/>The participants are:
    /// <br/>* **requester**
    /// <br/>	* The sender of the request - who initiates the request.
    /// <br/>* **accessTo**
    /// <br/>	* The scope of the request - what the privileges gives access to.
    /// <br/>* **target.requestParticipant**
    /// <br/>	* The target of the request - who will be granted the privileges upon approval.
    /// <br/>
    /// <br/>An AccessRequest is created as a specific request type that determines the flow and business rules for the request.
    /// <br/>The request type also sets the frame for the application of the three participants.
    /// <br/>The request type options are:
    /// <br/>* **PRIVILEGE_REQUEST**
    /// <br/>	* For requesting a privilege/group from another identity. This type of request needs manual approval by the identity (scope/**accessTo**)
    /// <br/>	* **requester** and **target.requestParticipant** will typically represent the same party, while **accessTo** is a third party who has to approve the request.
    /// <br/>* **DELEGATION_REQUEST**
    /// <br/>	* For delegating a privilege/group to another identity. This type of request is automatically approved since scope/**accessTo** is delegating
    /// <br/>	* **requester** and **accessTo** will typically represent the same party, while **target.requestParticipant** is a third party, who is granted access to **accessTo** automatically upon submission.
    /// <br/>* **APPOINTED_DELEGATION_REQUEST**
    /// <br/>	* For delegating a previously appointed privilege/group to an employee of the organisation, for whom the privilege was appointed.
    /// <br/>	* **requester**, **accessTo**, and **target.requestParticipant** can in this case be three different parties. **requester** has beforehand been appointed some privileges from **accessTo** the she delegates on to **target.requestParticipant**.
    /// <br/>* **CONNECTION_AGREEMENT_REQUEST**
    /// <br/>	* For an organisation of type COMPANY to ask to be considered an AUTHORITY with access to NgDP
    /// <br/>	* **requester**, **accessTo** and **target.requestParticipant** will typically be same party as this is only about gaining access and switching type in the system registry.No privileges are granted upon approval of this type.
    /// <br/>* **TERMS_APPROVAL_REQUEST**
    /// <br/>	* For organisations already of type AUTHORITY or organisations with public sector industry codes to approve the terms and gain access to NgDP
    /// <br/>	* **requester** and **accessTo** will be the organisation and **target.requestParticipant** will be the user who is appointed the USER_ADMINISTRATOR privilege for the organisation.
    /// <br/>* **USER_ADMIN_STATEMENT_OF_TRUTH_PRIVILEGE_REQUEST**
    /// <br/>	* For certain company types, a request of this request type will suffice and a user administrator privilege will automatically be granted. For other types a manual approval process is required. For the rest it is automatically rejected.
    /// <br/>* **USER_ADMIN_LOST_PRIVILEGE_REQUEST**
    /// <br/>	* If a company looses its user administrator, a request of this request type can be submitted. A system manager will approve the request.
    /// <br/>* **SPECIAL_PRIVILEGE_REQUEST**
    /// <br/>	* Curator, Liquidator and Executor of estate privileges are requested using a request of this request type. A system manager will approve the request.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessRequest
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RequestType RequestType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestState")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RequestStateType RequestState { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requester")]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestParticipant Requester { get; set; } = new RequestParticipant();

        [System.Text.Json.Serialization.JsonPropertyName("accessTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestParticipant AccessTo { get; set; } = new RequestParticipant();

        /// <summary>
        /// The set of privileges requested.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("privileges")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Privileges> Privileges { get; set; }

        /// <summary>
        /// When should the privilege be automatically revoked. If not provided the privilege is granted until manually revoked.Deprecated - use privilegeEndDateTime instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("privilegeEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        [System.Obsolete]
        public System.DateTimeOffset PrivilegeEndDate { get; set; }

        /// <summary>
        /// When should the privilege be automatically revoked. If not provided the privilege is granted until manually revoked.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("privilegeEndDateTime")]
        public System.DateTimeOffset PrivilegeEndDateTime { get; set; }

        /// <summary>
        /// The set of user groups requested. A user group is represented by its id from the Identity Registry.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userGroups")]
        public System.Collections.Generic.ICollection<System.Guid> UserGroups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdByIdentityId")]
        public System.Guid CreatedByIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdOnBehalfOf")]
        public bool CreatedOnBehalfOf { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string Note { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageNumber")]
        public string MessageNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qualification")]
        public string Qualification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qualificationComments")]
        public string QualificationComments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("justification")]
        public string Justification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("justificationComments")]
        public string JustificationComments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalBasis")]
        public string LegalBasis { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalBasisComments")]
        public string LegalBasisComments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        [System.ComponentModel.DataAnnotations.Required]
        public Target Target { get; set; } = new Target();

        [System.Text.Json.Serialization.JsonPropertyName("documentations")]
        public System.Collections.Generic.ICollection<Documentation> Documentations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("communications")]
        public System.Collections.Generic.ICollection<Communication> Communications { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processorNote")]
        public string ProcessorNote { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processedAutomatically")]
        public bool ProcessedAutomatically { get; set; }

        /// <summary>
        /// Timestamped when request is submitted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submissionDateTime")]
        public System.DateTimeOffset SubmissionDateTime { get; set; }

        /// <summary>
        /// Set to submitting user's identity id upon submission.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submittedByIdentityId")]
        public System.Guid SubmittedByIdentityId { get; set; }

        /// <summary>
        /// Timestamped when request is approved.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDateTime")]
        public System.DateTimeOffset ApprovalDateTime { get; set; }

        /// <summary>
        /// Set to approving user's identity id upon approval.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvedByIdentityId")]
        public System.Guid ApprovedByIdentityId { get; set; }

        /// <summary>
        /// Timestamped when request is rejected.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rejectionDateTime")]
        public System.DateTimeOffset RejectionDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rejectionReason")]
        public string RejectionReason { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rejectionComments")]
        public string RejectionComments { get; set; }

        /// <summary>
        /// Set to rejecting user's identity id upon rejection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rejectedByIdentityId")]
        public System.Guid RejectedByIdentityId { get; set; }

        /// <summary>
        /// Timestamped when request is revoked.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("revocationDateTime")]
        public System.DateTimeOffset RevocationDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("revocationReason")]
        public string RevocationReason { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("revocationComments")]
        public string RevocationComments { get; set; }

        /// <summary>
        /// Set to revoking user's identity id upon revocation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("revokedByIdentityId")]
        public System.Guid RevokedByIdentityId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessRequestSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessRequests")]
        public System.Collections.Generic.ICollection<AccessRequest> AccessRequests { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Communication
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("communicationType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CommunicationType CommunicationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public long Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of values that determine the type of communication.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* ACCESS_REQUEST_MESSAGE_EMAIL
    /// <br/>	* Email
    /// <br/>* ACCESS_REQUEST_MESSAGE_MEMO
    /// <br/>	* Memo
    /// <br/>* JOURNAL
    /// <br/>	* Journal
    /// <br/>* PRIVILEGE_MESSAGE_EMAIL
    /// <br/>	* Email
    /// <br/>* PRIVILEGE_MESSAGE_MEMO
    /// <br/>	* Memo
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommunicationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_MESSAGE_EMAIL")]
        ACCESS_REQUEST_MESSAGE_EMAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_MESSAGE_MEMO")]
        ACCESS_REQUEST_MESSAGE_MEMO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"JOURNAL")]
        JOURNAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGE_MESSAGE_EMAIL")]
        PRIVILEGE_MESSAGE_EMAIL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGE_MESSAGE_MEMO")]
        PRIVILEGE_MESSAGE_MEMO = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Documentation
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// Media type. Determined from filename.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Filename. Set when adding multipart content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentationType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DocumentationType DocumentationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public long Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR_CERTIFICATE")]
        CURATOR_CERTIFICATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR_CERTIFICATE")]
        LIQUIDATOR_CERTIFICATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR_EXTRACT")]
        CVR_EXTRACT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RECONSTRUCTOR_CERTIFICATE")]
        RECONSTRUCTOR_CERTIFICATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BOARD_MEETING_SUMMARY_EXTRACT")]
        BOARD_MEETING_SUMMARY_EXTRACT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_TERMINATION")]
        CERTIFICATE_OF_TERMINATION = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"POWER_OF_ATTORNEY")]
        POWER_OF_ATTORNEY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PROBATE_CERTIFICATE")]
        PROBATE_CERTIFICATE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNED_CONNECTION_AGREEMENT")]
        SIGNED_CONNECTION_AGREEMENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ARTICLES_OF_ASSOCIATION")]
        ARTICLES_OF_ASSOCIATION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNTS")]
        ACCOUNTS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_DIAGRAM")]
        ORGANISATION_DIAGRAM = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_CARD")]
        BUSINESS_CARD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LAW_OR_EXECUTIVE_ORDER_EXTRACT")]
        LAW_OR_EXECUTIVE_ORDER_EXTRACT = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_CREDENTIALS")]
        PERSONAL_CREDENTIALS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 16,

    }

    /// <summary>
    /// Enumeration of values that determine the type of a request.
    /// <br/>It is required upon creation and cannot be altered.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* CPR
    /// <br/>	* Citizen
    /// <br/>* CVR
    /// <br/>	* Organisation
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR")]
        CPR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR")]
        CVR = 2,

    }

    /// <summary>
    /// An AccessRequest always consists of three participants, even though for some types of AccessRequest, each participant may have same identity.
    /// <br/>The participants are:
    /// <br/>* **requester**
    /// <br/>	* The sender of the request - who initiates the request.
    /// <br/>* **accessTo**
    /// <br/>	* The scope of the request - what the privileges gives access to.
    /// <br/>* **target.requestParticipant**
    /// <br/>	* The target of the request - who will be granted the privileges upon approval.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestParticipant
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("externalIdType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ExternalIdType ExternalIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationIdentityId")]
        public System.Guid OrganisationIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationNameResolved")]
        public string OrganisationNameResolved { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employeeIdentityId")]
        public System.Guid EmployeeIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citizenIdentityId")]
        public System.Guid CitizenIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        public System.Guid IdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityTypeResolved")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RequestParticipantIdentityTypeResolved IdentityTypeResolved { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstNameProvided")]
        public string FirstNameProvided { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastNameProvided")]
        public string LastNameProvided { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstNameResolved")]
        public string FirstNameResolved { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastNameResolved")]
        public string LastNameResolved { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string Alias { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public string Position { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("darAddressId")]
        public System.Guid DarAddressId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of values that determine the current state of a request.&lt;br/&gt;A request's workflow is controlled by switching between states.&lt;br/&gt;
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* DRAFT
    /// <br/>	* Request draft state - optional
    /// <br/>* SUBMITTED
    /// <br/>	* Request submitted state - switching to SUBMITTED submits the request that is either automatically approved or presented to partipant for approval
    /// <br/>* APPROVED
    /// <br/>	* Request approved state - switching to APPROVED approves the request and grants the privileges/groups
    /// <br/>* REJECTED
    /// <br/>	* Request rejected state - switching to REJECTED rejects the request and no privileges will be granted
    /// <br/>* REVOKED
    /// <br/>	* Request revoked state - switching to REVOKED revokes a previously approved request and revokes the granted privileges
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestStateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBMITTED")]
        SUBMITTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"REVOKED")]
        REVOKED = 5,

    }

    /// <summary>
    /// Enumeration of values that determine the type of a request.
    /// <br/>It is required upon creation and cannot be altered.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* PRIVILEGE_REQUEST
    /// <br/>	* For requesting a privilege/group from another identity. This type of request needs manual approval by the identity (scope/accessTo)
    /// <br/>* DELEGATION_REQUEST
    /// <br/>	* For delegating a privilege/group to another identity. This type of request is automatically approved since scope/accessTo is delegating
    /// <br/>* APPOINTED_DELEGATION_REQUEST
    /// <br/>	* For delegating a previously appointed privilege/group to an employee of the organisation, for whom the privilege was appointed.
    /// <br/>* CONNECTION_AGREEMENT_REQUEST
    /// <br/>	* For an organisation of type COMPANY to ask to be considered an AUTHORITY with access to NgDP
    /// <br/>* TERMS_APPROVAL_REQUEST
    /// <br/>	* For organisations already of type AUTHORITY or organisations with public sector industry codes to approve the terms and gain access to NgDP
    /// <br/>* USER_ADMIN_STATEMENT_OF_TRUTH_PRIVILEGE_REQUEST
    /// <br/>	* For certain company types, a request of this request type will suffice and a user administrator privilege will automatically be granted. For other types a manual approval process is required. For the rest it is automatically rejected.
    /// <br/>* USER_ADMIN_LOST_PRIVILEGE_REQUEST
    /// <br/>	* If a company looses its user administrator, a request of this request type can be submitted. A system manager will approve the request.
    /// <br/>* SPECIAL_PRIVILEGE_REQUEST
    /// <br/>	* Curator, Liquidator and Executor of estate privileges are requested using a request of this request type. A system manager will approve the request.
    /// <br/>* LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY_PRIVILEGE_REQUEST
    /// <br/>	* Citizen access to closed company. A system manager will approve the request.
    /// <br/>* DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REQUEST
    /// <br/>	* For supporters of the solution to get access to companies needing guidance. The request is automatically approved.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGE_REQUEST")]
        PRIVILEGE_REQUEST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATION_REQUEST")]
        DELEGATION_REQUEST = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTED_DELEGATION_REQUEST")]
        APPOINTED_DELEGATION_REQUEST = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONNECTION_AGREEMENT_REQUEST")]
        CONNECTION_AGREEMENT_REQUEST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMS_APPROVAL_REQUEST")]
        TERMS_APPROVAL_REQUEST = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_ADMIN_STATEMENT_OF_TRUTH_PRIVILEGE_REQUEST")]
        USER_ADMIN_STATEMENT_OF_TRUTH_PRIVILEGE_REQUEST = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_ADMIN_LOST_PRIVILEGE_REQUEST")]
        USER_ADMIN_LOST_PRIVILEGE_REQUEST = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SPECIAL_PRIVILEGE_REQUEST")]
        SPECIAL_PRIVILEGE_REQUEST = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY_PRIVILEGE_REQUEST")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY_PRIVILEGE_REQUEST = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REQUEST")]
        DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REQUEST = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Target
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestParticipant")]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestParticipant RequestParticipant { get; set; } = new RequestParticipant();

        [System.Text.Json.Serialization.JsonPropertyName("targetState")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TargetStateType TargetState { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activationCodeSentDateTime")]
        public System.DateTimeOffset ActivationCodeSentDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activationDateTime")]
        public System.DateTimeOffset ActivationDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of values that determine the virus scan state of a file.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* PENDING
    /// <br/>	* Awaiting approval
    /// <br/>* ACTIVATION_CODE_SENT
    /// <br/>	* Activation code has been emailed to target's requestParticipant
    /// <br/>* GRANTED
    /// <br/>	* Privileges and/or groups have been granted to target's requestParticipant
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TargetStateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVATION_CODE_SENT")]
        ACTIVATION_CODE_SENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GRANTED")]
        GRANTED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorMessage
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fieldErrors")]
        public System.Collections.Generic.ICollection<FieldErrorResource> FieldErrors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldErrorResource
    {

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public string Resource { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rejectedValue")]
        public object RejectedValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETag
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutboxEventSenderResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("sentMessages")]
        public System.Collections.Generic.ICollection<OutboxMessageStatus> SentMessages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutboxMessageStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        public System.Guid EventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceEventId")]
        public System.Guid SourceEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OutboxMessageStatusState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutboxEventSenderCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("messageCount")]
        public int MessageCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBefore")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedBefore { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutboxEventCleanupResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("deletedEvents")]
        public int DeletedEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutboxEventCleanupCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdBefore")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedBefore { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains only a single activation code that uniquely identifies the target and the approved privileges. User activating must log in from target organisation or else activation request is denied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TargetActivation
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationLookup
    {

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationName")]
        public string OrganisationName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activeCurator")]
        public bool ActiveCurator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activeExecutor")]
        public bool ActiveExecutor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activeLiquidator")]
        public bool ActiveLiquidator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Citizen Lookup result containing information about citizen needed by Rightsportal in a single response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CitizenLookupResult
    {
        /// <summary>
        /// Identity ID of a citizen.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        public System.Guid IdentityId { get; set; }

        /// <summary>
        /// Full name of a citizen.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("closed")]
        public bool Closed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CitizenLookupCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{10})$")]
        public string CprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstNameProvided")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string FirstNameProvided { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastNameProvided")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string LastNameProvided { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenRevocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order
    {

        [System.Text.Json.Serialization.JsonPropertyName("property")]
        public string Property { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrderDirection Direction { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingArguments
    {

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ordering")]
        public System.Collections.Generic.ICollection<Order> Ordering { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public System.Collections.Generic.ICollection<object> Content { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public PagingArguments Previous { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public PagingArguments Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pageable
    {

        [System.Text.Json.Serialization.JsonPropertyName("paged")]
        public bool Paged { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unpaged")]
        public bool Unpaged { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sort")]
        public Sort Sort { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("offset")]
        public long Offset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sort
    {

        [System.Text.Json.Serialization.JsonPropertyName("sorted")]
        public bool Sorted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unsorted")]
        public bool Unsorted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("empty")]
        public bool Empty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OAuth2AccessToken
    {

        [System.Text.Json.Serialization.JsonPropertyName("expired")]
        public bool Expired { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string RefreshToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenType")]
        public string TokenType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiresIn")]
        public int ExpiresIn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        public System.Collections.Generic.IDictionary<string, object> AdditionalInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scope")]
        public System.Collections.Generic.ICollection<string> Scope { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset Expiration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelAndView
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View View { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("model")]
        public System.Collections.Generic.IDictionary<string, object> Model { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ModelAndViewStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("viewName")]
        public string ViewName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public bool Reference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modelMap")]
        public ModelMap ModelMap { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("empty")]
        public bool Empty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View
    {

        [System.Text.Json.Serialization.JsonPropertyName("contentType")]
        public string ContentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Algorithm
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirement")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AlgorithmRequirement Requirement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Base64
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Base64URL
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JWK
    {

        [System.Text.Json.Serialization.JsonPropertyName("keyStore")]
        public KeyStore KeyStore { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keyUse")]
        public KeyUse KeyUse { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keyType")]
        public KeyType KeyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("x509CertChain")]
        public System.Collections.Generic.ICollection<Base64> X509CertChain { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keyOperations")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<KeyOperations> KeyOperations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keyID")]
        public string KeyID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("x509CertURL")]
        public System.Uri X509CertURL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("x509CertThumbprint")]
        public Base64URL X509CertThumbprint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("x509CertSHA256Thumbprint")]
        public Base64URL X509CertSHA256Thumbprint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parsedX509CertChain")]
        public System.Collections.Generic.ICollection<ParsedX509CertChain> ParsedX509CertChain { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requiredParams")]
        public System.Collections.Generic.IDictionary<string, object> RequiredParams { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algorithm")]
        public Algorithm Algorithm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("private")]
        public bool Private { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JWKSet
    {

        [System.Text.Json.Serialization.JsonPropertyName("keys")]
        public System.Collections.Generic.ICollection<JWK> Keys { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalMembers")]
        public System.Collections.Generic.IDictionary<string, object> AdditionalMembers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyType
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirement")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public KeyTypeRequirement Requirement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyUse
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("requiredConfiguration")]
        public OpenIdRequiredConfiguration RequiredConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recommendedConfiguration")]
        public OpenIdRecommendedConfiguration RecommendedConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("optionalConfiguration")]
        public OpenIdOptionalConfiguration OptionalConfiguration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdOptionalConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("responseModesSupported")]
        public System.Collections.Generic.ICollection<string> ResponseModesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("grantTypesSupported")]
        public System.Collections.Generic.ICollection<string> GrantTypesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("acrValuesSupported")]
        public System.Collections.Generic.ICollection<string> AcrValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("idTokenEncryptionAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> IdTokenEncryptionAlgValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("idTokenEncryptionEncValuesSupported")]
        public System.Collections.Generic.ICollection<string> IdTokenEncryptionEncValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfoSigningAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> UserinfoSigningAlgValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfoEncryptionAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> UserinfoEncryptionAlgValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfoEncryptionEncValuesSupported")]
        public System.Collections.Generic.ICollection<string> UserinfoEncryptionEncValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestObjectSigningAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> RequestObjectSigningAlgValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestObjectEncryptionAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> RequestObjectEncryptionAlgValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestObjectEncryptionEncValuesSupported")]
        public System.Collections.Generic.ICollection<string> RequestObjectEncryptionEncValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenEndpointAuthMethodsSupported")]
        public System.Collections.Generic.ICollection<string> TokenEndpointAuthMethodsSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenEndpointAuthSigningAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> TokenEndpointAuthSigningAlgValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayValuesSupported")]
        public System.Collections.Generic.ICollection<string> DisplayValuesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimTypesSupported")]
        public System.Collections.Generic.ICollection<string> ClaimTypesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceDocumentation")]
        public System.Uri ServiceDocumentation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("frontchannelLogout")]
        public System.Uri FrontchannelLogout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("checkSessionIframe")]
        public System.Uri CheckSessionIframe { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endSessionEndpoint")]
        public System.Uri EndSessionEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimsLocalesSupported")]
        public System.Collections.Generic.ICollection<ClaimsLocalesSupported> ClaimsLocalesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uiLocalesSupported")]
        public System.Collections.Generic.ICollection<UiLocalesSupported> UiLocalesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("codeChallengeMethodsSupported")]
        public System.Collections.Generic.ICollection<string> CodeChallengeMethodsSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimsParameterSupported")]
        public bool ClaimsParameterSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestParameterSupported")]
        public bool RequestParameterSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestUriParameterSupported")]
        public bool RequestUriParameterSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("frontchannelLogoutSupported")]
        public bool FrontchannelLogoutSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("checkSessionIframeSupported")]
        public bool CheckSessionIframeSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requireRequestUriRegistration")]
        public bool RequireRequestUriRegistration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("opPolicyUri")]
        public System.Uri OpPolicyUri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("opTosUri")]
        public System.Uri OpTosUri { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdRecommendedConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("userinfoEndpoint")]
        public System.Uri UserinfoEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationEndpoint")]
        public System.Uri RegistrationEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopesSupported")]
        public System.Collections.Generic.ICollection<string> ScopesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimsSupported")]
        public System.Collections.Generic.ICollection<string> ClaimsSupported { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdRequiredConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("issuer")]
        public System.Uri Issuer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("authorizationEndpoint")]
        public System.Uri AuthorizationEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenEndpoint")]
        public System.Uri TokenEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("jwksUri")]
        public System.Uri JwksUri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("responseTypesSupported")]
        public System.Collections.Generic.ICollection<string> ResponseTypesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectTypesSupported")]
        public System.Collections.Generic.ICollection<string> SubjectTypesSupported { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("idTokenSigningAlgValuesSupported")]
        public System.Collections.Generic.ICollection<string> IdTokenSigningAlgValuesSupported { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The contact view prepered for statistic generation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactNemSMSSubscriptionView
    {
        /// <summary>
        /// The field representing the number of contacts
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long Count { get; set; }

        /// <summary>
        /// The field representing the type of contact
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetType")]
        public string TargetType { get; set; }

        /// <summary>
        /// Age of citizen, not present for company
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("age")]
        public int Age { get; set; }

        /// <summary>
        /// Is there notification subscription for NemSMS
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nemSmsSubscription")]
        public bool NemSmsSubscription { get; set; }

        /// <summary>
        /// Is the notification subscription for NemSMS confirmed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verifiedNemSmsSubscription")]
        public bool VerifiedNemSmsSubscription { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result for the query to /nemsms-subscriptions endpointthe result includes information about the amount of contactfor specific parameters including target, nemSMS subscription creation and verificationas well as age
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactNemSMSSubscriptionViewSearchResult
    {
        /// <summary>
        /// List of ContactNemSMSSubscription views divided by specific aggregation parameters
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("views")]
        public System.Collections.Generic.ICollection<ContactNemSMSSubscriptionView> Views { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The contact view prepared with information about exemptions for statistic generation 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExemptionsView
    {
        /// <summary>
        /// The field with the number of contacts for the specific set of parameters
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long Count { get; set; }

        /// <summary>
        /// The field representing the type of contact
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetType")]
        public string TargetType { get; set; }

        /// <summary>
        /// The actual status of contact's registration
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registrationStatus")]
        public string RegistrationStatus { get; set; }

        /// <summary>
        /// The reason of contact's exemption
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exemptionReason")]
        public string ExemptionReason { get; set; }

        /// <summary>
        /// Age of citizen, not present for company
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("age")]
        public int Age { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result for the query to /exemptions endpointthe result includes information about the amount of contactsfor specific parameters including target,registration status and reason for exemptionas well as age
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExemptionsViewSearchResult
    {
        /// <summary>
        /// List of exemptions views divided by specific aggregation parameters
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("views")]
        public System.Collections.Generic.ICollection<ExemptionsView> Views { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Contact resource is the "phonebook" of Digital Post, which contains information about every danish Citizen above 15 and every active company in Denmark. A contact keeps track of if the company or citizen is subscribed to Digital Post, NemSMS or exempt. All Contacts are created on information from either the CVR registry for companies and CPR registry for citizens.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Indicating the type of the contact.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContactType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// The CPR number without any separators (such as -) identifying the citizen. This is only relevant for Contacts of type CIITZEN.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        public string CprNumber { get; set; }

        /// <summary>
        /// The CVR number identifying the company. This is only relevant for Contacts of type COMPANY
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        /// <summary>
        /// The indicator is the Contact is eligible for voluntary registration or not. If true then the registration status must be VOLUNTARY unless exempt. Likewise Contact with the value false can never have a registration status of VOLUNTARY
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eligibleForVoluntaryRegistration")]
        public bool EligibleForVoluntaryRegistration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nemSmsSubscription")]
        public NemSmsSubscription NemSmsSubscription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mailboxSubscription")]
        public MailboxSubscription MailboxSubscription { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The results of a query against the contact registry of Digital Post, including the list of contacts matching the query as well as information about how many results were found split over how many pages, what page has currently been returned, and the "next" query parameter for getting the next page of results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactSearchResult
    {
        /// <summary>
        /// The list of contacts matching the query on the requested page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contacts")]
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; }

        /// <summary>
        /// The current page of results
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        /// <summary>
        /// The total number of pages with results matching the query
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        /// <summary>
        /// The number of results on the current page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        /// <summary>
        /// The total number of results matched by the query
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        /// <summary>
        /// The value of the "next" parameter used for fetching the next page matching the original query
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The current the Digital Post registration status for a Contact. This is always present for Contact except citizens who are about to enter the registration flow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailboxSubscription
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RegistrationStatus RegistrationStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("publicRegistrationStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PublicRegistrationStatus PublicRegistrationStatus { get; set; }

        /// <summary>
        /// Indicator for if the Contact was registered/exempt based on a power of attorney. Used when a Borgerservicemedarbejder or Erhvervsservicemedarbejder is registering or exempting a Contact.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exemptThroughPowerOfAttorney")]
        public bool ExemptThroughPowerOfAttorney { get; set; }

        /// <summary>
        /// The date of when the exemption started, should always be set to 'today' when exemption. To extend an exemption of a company, this can again be set to 'today'. If the contact is not exempt this must always be null
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exemptionStart")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExemptionStart { get; set; }

        /// <summary>
        /// The date of when the exemption ends, only relevant for companies since their exemption is time limited. This field is always calculated based on the 'exemptionStart'. If the contact is not exempt this must always be null
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exemptionEnd")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExemptionEnd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        public System.DateTimeOffset StartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        public System.DateTimeOffset EndTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The NemSmsSubscription contains the phone number used for NemSMS as well as whether the number is verified and when. A NemSMS subscription can be be created multiple ways, either by the citizen himself, an employee with in the company with a message employee of administrator access. Or on behalf of others by a citizen service employee, business authority employee or a sender system can do an assisted subscription for citizens
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NemSmsSubscription
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The SMS number used for receiving NemSMS’es. Only danish numbers without county code is allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mobileNumber")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[2-9]\d{7}$")]
        public string MobileNumber { get; set; }

        /// <summary>
        /// The timestamp of when the phone number was verified using a pin. If null, then the phone number is not yet verified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verificationTime")]
        public System.DateTimeOffset VerificationTime { get; set; }

        /// <summary>
        /// The timestamp of when the owner of the contact last confirmed that the number was still in correct. It is expected that viewclient update this regularly, however Digital Post have no requirements of how frequent the number if confirmed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmedDateTime")]
        public System.DateTimeOffset ConfirmedDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// When the value REGISTERED is the Contact can receive Digital Post 
    /// <br/>When the value is EXEMPT the Contact is exempt and cannot receive Digital Post 
    /// <br/>When the value is CLOSED the Contact is closed either because the citizen is deceased or the company is closed and cannot receive Digital Post
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicRegistrationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REGISTERED")]
        REGISTERED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXEMPT")]
        EXEMPT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 3,

    }

    /// <summary>
    /// AUTOMATIC_REGISTRATION: The status indicating that the Contact is fully registered Digital Post 
    /// <br/>VOLUNTARY_REGISTRATION: The status Citizens have 21 days prior to being registered Digital Post 
    /// <br/>BEFORE_UNCONFIRMED_REGISTRATION: The status Citizens have 21 days prior to being registered Digital Post 
    /// <br/>UNCONFIRMED_REGISTRATION: The status for when a Contact is 'karensperiode' they cannot receive Digital Post until either the period ends or they loginEXEMPT_LEFT_THE_COUNTRY: The Contact is exempt because they have left the country 
    /// <br/>EXEMPT_OTHER_REASON: The Contact is exempt 
    /// <br/>CREATED_AWAITING_REGISTRATION: The status Citizens under 15 years - 3 weeks 
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistrationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_REGISTRATION")]
        AUTOMATIC_REGISTRATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VOLUNTARY_REGISTRATION")]
        VOLUNTARY_REGISTRATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BEFORE_UNCONFIRMED_REGISTRATION")]
        BEFORE_UNCONFIRMED_REGISTRATION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIRMED_REGISTRATION")]
        UNCONFIRMED_REGISTRATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXEMPT_LEFT_THE_COUNTRY")]
        EXEMPT_LEFT_THE_COUNTRY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EXEMPT_OTHER_REASON")]
        EXEMPT_OTHER_REASON = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED_AWAITING_REGISTRATION")]
        CREATED_AWAITING_REGISTRATION = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionVerificationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pin")]
        public string Pin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("renewPin")]
        public bool RenewPin { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CprPrivilegeCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        public string CprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("privilegeType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CprPrivilegeCommandPrivilegeType PrivilegeType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CvrPrivilegeCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("privilegeType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CvrPrivilegeCommandPrivilegeType PrivilegeType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        public string CprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ridNumber")]
        public string RidNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("professionalId")]
        public string ProfessionalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("professionalPersonId")]
        public string ProfessionalPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprPrivileges")]
        public System.Collections.Generic.ICollection<CprPrivilegeCommand> CprPrivileges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrPrivileges")]
        public System.Collections.Generic.ICollection<CvrPrivilegeCommand> CvrPrivileges { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Entity that defines which contacts senderSystem is subscribed to. Subscription criteria can be specified with subscriptionOperations and with list of contacts
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactSubscription
    {
        /// <summary>
        /// The primary id of the ContactSubscription.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// identityId of SenderSystem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemIdentityId")]
        public System.Guid SenderSystemIdentityId { get; set; }

        /// <summary>
        /// The current version of the ContactSubscription. This is automatically incremented on every update to the object
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Set of operations performed on Contact that associated SenderSystem should be notified about.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionOperations")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<SubscriptionOperations> SubscriptionOperations { get; set; }

        /// <summary>
        /// List of Contact ids. If Contact with id in that list is modified then SenderSystem should be notified about it.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("singleContactSubscriptions")]
        public System.Collections.Generic.ICollection<SingleContactSubscription> SingleContactSubscriptions { get; set; }

        /// <summary>
        /// Url endpoint used for sending notifications to SenderSystems.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notificationUrl")]
        public string NotificationUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Used for specifying subscription to singular Contact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleContactSubscription
    {
        /// <summary>
        /// The primary id of the SingleContactSubscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the SingleContactSubscription. This is automatically incremented on every update to the object
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Defines which Contact this subscription is about.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public System.Guid ContactId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactSubscriptionCommand
    {
        /// <summary>
        /// Set of Contact operations senderSystem should be notified about.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionOperations")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<subscriptionOperations> SubscriptionOperations { get; set; }

        /// <summary>
        /// A list of contact UUID values
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("singleContactSubscriptions")]
        public System.Collections.Generic.ICollection<System.Guid> SingleContactSubscriptions { get; set; }

        /// <summary>
        /// Url endpoint used for sending notifications to SenderSystems.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notificationUrl")]
        public string NotificationUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemoCreateAndSendCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cvr")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 8)]
        public string Cvr { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength = 36)]
        public string OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength = 36)]
        public string SenderSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 8)]
        public string RecipientId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MemoCreateAndSendCommandRecipientIdType RecipientIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("longMessage")]
        public bool LongMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberOfAdditionalAttachments")]
        [System.ComponentModel.DataAnnotations.Range(int.MinValue, 5)]
        public int NumberOfAdditionalAttachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reply")]
        public bool Reply { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointId")]
        [System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength = 36)]
        public string ContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("replyByDateTime")]
        public System.DateTimeOffset ReplyByDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public bool Action { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalNotification")]
        public bool LegalNotification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandatory")]
        public bool Mandatory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Receipt
    {

        [System.Text.Json.Serialization.JsonPropertyName("transmissionId")]
        public System.Guid TransmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageUUID")]
        public System.Guid MessageUUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]
        public string ErrorCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeStamp")]
        public System.DateTimeOffset TimeStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReceiptStatus ReceiptStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemoMessage
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceiptSearchCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingResultUUID
    {

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public System.Collections.Generic.ICollection<System.Guid> Content { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public PagingArguments Previous { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public PagingArguments Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkReceipt
    {

        [System.Text.Json.Serialization.JsonPropertyName("transmissionId")]
        public System.Guid TransmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageUUID")]
        public System.Guid MessageUUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]
        public string ErrorCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeStamp")]
        public System.DateTimeOffset TimeStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BulkReceiptReceiptStatus ReceiptStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceiptSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receipts")]
        public System.Collections.Generic.ICollection<BulkReceipt> Receipts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NgdpReceiptCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemId")]
        public string SenderSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transmissionId")]
        public string TransmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceProtocol")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NgdpReceiptCommandServiceProtocol ServiceProtocol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NgdpReceipt
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public Receipt Receipt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemId")]
        public System.Guid SenderSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptListId")]
        public int ReceiptListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceName")]
        public string ResourceName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingResultNgdpReceipt
    {

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public System.Collections.Generic.ICollection<NgdpReceipt> Content { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public PagingArguments Previous { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public PagingArguments Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FejlType
    {

        [System.Text.Json.Serialization.JsonPropertyName("fejlKode")]
        public int FejlKode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fejlTekst")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FejlTekst { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fejlIdentifikator")]
        public string FejlIdentifikator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AfsendelseModtagerSamlingType
    {

        [System.Text.Json.Serialization.JsonPropertyName("afsendelseModtager")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SlutbrugerIdentitetType> AfsendelseModtager { get; set; } = new System.Collections.ObjectModel.Collection<SlutbrugerIdentitetType>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpostAfsendelseKvitteringType
    {

        [System.Text.Json.Serialization.JsonPropertyName("systemIdentifikator")]
        public int SystemIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meddelelseIdentifikator")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MeddelelseIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("afsendelseModtagerSamling")]
        [System.ComponentModel.DataAnnotations.Required]
        public AfsendelseModtagerSamlingType AfsendelseModtagerSamling { get; set; } = new AfsendelseModtagerSamlingType();

        [System.Text.Json.Serialization.JsonPropertyName("meddelelseTraadIdentifikator")]
        public string MeddelelseTraadIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("afsendelseDatoTid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset AfsendelseDatoTid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpostForsendelseKvitteringType
    {

        [System.Text.Json.Serialization.JsonPropertyName("systemIdentifikator")]
        public int SystemIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meddelelseIdentifikator")]
        public string MeddelelseIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postkasseMetadata")]
        public PostkasseMetadataType PostkasseMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("originalMeddelelseIdentifikator")]
        public string OriginalMeddelelseIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("afsendelseDatoTid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset AfsendelseDatoTid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataSamlingType
    {

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public System.Collections.Generic.ICollection<MetadataType> Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("metadataNoegleNavn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MetadataNoegleNavn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataVaerdiTekst")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MetadataVaerdiTekst { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostkasseMetadataType
    {

        [System.Text.Json.Serialization.JsonPropertyName("postkasseIdentifikator")]
        public int PostkasseIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postkasseEmneIdentifikator")]
        public int PostkasseEmneIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metadataSamling")]
        public MetadataSamlingType MetadataSamling { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlutbrugerIdentitetType
    {

        [System.Text.Json.Serialization.JsonPropertyName("cvrnummerIdentifikator")]
        public string CvrnummerIdentifikator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprnummerIdentifikator")]
        public string CprnummerIdentifikator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageUuid
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transmissionId")]
        public System.Guid TransmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageUuidCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transmissionId")]
        public System.Guid TransmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The EvenLog resource represents an action or event in the Digital Post. It both contains the properties the event was created with, along with further information added when the resource was stored
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventLog
    {
        /// <summary>
        /// the resource id of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// the id of the event the resource is based on
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        public System.Guid EventId { get; set; }

        /// <summary>
        /// the version of the resource, automatically incremented when updated
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// the kafka channel the event was send on
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        public string Channel { get; set; }

        /// <summary>
        /// the channels if the event was base don multiple channels
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channels")]
        public System.Collections.Generic.ICollection<string> Channels { get; set; }

        /// <summary>
        /// The subject of the event. Is used to determine who can see the event and how it is enriched
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string Subject { get; set; }

        /// <summary>
        /// The type of the event. Is used to determine who can see the event and how it is enriched
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Identity of the organisation of the owner. If the owner belongs to an organisation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organisationIdentityId")]
        public System.Guid OrganisationIdentityId { get; set; }

        /// <summary>
        /// The id of the event which caused a chain of events
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rootId")]
        public System.Guid RootId { get; set; }

        /// <summary>
        /// Timestamp for when the event was initially send from a component, always in UTC.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventTime")]
        public System.DateTimeOffset EventTime { get; set; }

        /// <summary>
        /// Timestamp for when the event was saved to the event-log, always in UTC.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Owner of the event (or resource that the event references), if the event was done by an employee or a system, the owner will be the CVR of the linked organisation or company, or the CPR of the citizen.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Identity id for owner of the event (or resource that the event references)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerIdentityId")]
        public string OwnerIdentityId { get; set; }

        /// <summary>
        /// Who is responsible for the event. In the example below, an employee sends a message, therefore he is the actor. If the actor is an employee in another organisation, then the CVR returned instead. E.g. if a  citizen service employee modifies data that belongs to a citizen, the citizen cannot identify which exact employee did the change only the municipality that the employee is employed by.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Identity id for actor of the event (or resource that the event references)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actorIdentityId")]
        public string ActorIdentityId { get; set; }

        /// <summary>
        /// identity id of the parent of the owner. If the owner belongs to an organisation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public System.Guid ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("system")]
        public SystemDto System { get; set; }

        /// <summary>
        /// the message the event conveyed, often a UUID of another resource
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// the properties that were present on the event when the event was ingested
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventProperties")]
        public System.Collections.Generic.IDictionary<string, string> EventProperties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("metaProperties")]
        public MetaData MetaProperties { get; set; }

        /// <summary>
        /// Searchable properties added during the search event processing on event-log-index
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("searchEventProperties")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>> SearchEventProperties { get; set; }

        /// <summary>
        /// A tag that combines the subject and type into a single searchable topic.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventTag")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventLogEventTag EventTag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The results of a query against the contact registry of Digital Post, including the list of contacts matching the query as well as information about how many results were found split over how many pages, what page has currently been returned, and the "next" query parameter for getting the next page of results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventLogSearchResult
    {
        /// <summary>
        /// The list of contacts matching the query on the requested page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("events")]
        public System.Collections.Generic.ICollection<EventLog> Events { get; set; }

        /// <summary>
        /// The current page of results
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        /// <summary>
        /// The total number of pages with results matching the query
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        /// <summary>
        /// The number of results on the current page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        /// <summary>
        /// The total number of results matched by the query
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        /// <summary>
        /// The value of the "next" parameter used for fetching the next page matching the original query
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO")]
        MEMO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DP")]
        DP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

    }

    /// <summary>
    /// Properties added when the event was collected often circumstantial information such as cvr/cpr or the title of a send message  
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaData
    {
        /// <summary>
        /// the resource id of the metadata.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statisticsMetadata")]
        public StatisticsMetadata StatisticsMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageUUID")]
        public System.Guid MessageUUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MetaDataMessageType MessageType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointId")]
        public string RecipientContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointLabel")]
        public string RecipientContactPointLabel { get; set; }

        /// <summary>
        /// refers to recipientContactPointLabel.This field is no longer in use. It is deprecated and we should use the referenced -&gt; (recipientContactPointLabel) field instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointName")]
        [System.Obsolete]
        public string RecipientContactPointName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderContactPointId")]
        public string SenderContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentResponsibleId")]
        public string ContentResponsibleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentResponsibleIdentityId")]
        public string ContentResponsibleIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attachmentCount")]
        public string AttachmentCount { get; set; }

        /// <summary>
        /// refers to attachmentCount.This field is no longer in use. It is deprecated and we should use the referenced -&gt; (attachmentCount) field instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfAttachments")]
        [System.Obsolete]
        public string NumberOfAttachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentLabel")]
        public string DocumentLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        public string DocumentId { get; set; }

        /// <summary>
        /// refers to labelThis field is no longer in use. It is deprecated and we should use the referenced -&gt; (label) field instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.Obsolete]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalNotification")]
        public string LegalNotification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandatory")]
        public string Mandatory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientSystem")]
        public System.Guid RecipientSystem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientSystemName")]
        public string RecipientSystemName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("doNotDeliverUntilDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DoNotDeliverUntilDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystem")]
        public System.Guid SenderSystem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemName")]
        public string SenderSystemName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemReceiptEndpoint")]
        public string SenderSystemReceiptEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemSmtpEndpoint")]
        public string SenderSystemSmtpEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentLength")]
        public string ContentLength { get; set; }

        /// <summary>
        /// refers to contentLengthThis field is no longer in use. It is deprecated and we should use the referenced -&gt; (contentLength) field instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        [System.Obsolete]
        public string Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderID")]
        public string SenderID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderIdentityId")]
        public string SenderIdentityId { get; set; }

        /// <summary>
        /// refers to senderIDThis field is no longer in use. It is deprecated and we should use the referenced -&gt; (senderID) field instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sender")]
        [System.Obsolete]
        public string Sender { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientID")]
        public string RecipientID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdentityId")]
        public string RecipientIdentityId { get; set; }

        /// <summary>
        /// refers to recipientIDThis field is no longer in use. It is deprecated and we should use the referenced -&gt; (recipientID) field instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        [System.Obsolete]
        public string Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transmissionId")]
        public System.Guid TransmissionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderType")]
        public string SenderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientType")]
        public string RecipientType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptStatus")]
        public string ReceiptStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recalled")]
        public string Recalled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticsMetadata
    {

        [System.Text.Json.Serialization.JsonPropertyName("objectStorageId")]
        public string ObjectStorageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderOrganisationName")]
        public string SenderOrganisationName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemIdentityId")]
        public System.Guid SenderSystemIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientSystemIdentityId")]
        public System.Guid RecipientSystemIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasActions")]
        public bool HasActions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasRecipientLabel")]
        public bool HasRecipientLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasRecipientAttentionData")]
        public bool HasRecipientAttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasSenderAttentionData")]
        public bool HasSenderAttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAdditionalNotificationUsed")]
        public bool CustomAdditionalNotificationUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customNotificationUsed")]
        public bool CustomNotificationUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReplyable")]
        public bool IsReplyable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasReplyData")]
        public bool HasReplyData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasContentData")]
        public bool HasContentData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageFormat")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StatisticsMetadataMessageFormat MessageFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasSenderContentResponsible")]
        public bool HasSenderContentResponsible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enrichedByMemo")]
        public bool EnrichedByMemo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enrichedByMessage")]
        public bool EnrichedByMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enrichmentComplete")]
        public bool EnrichmentComplete { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// the internal system responsible for sending the event
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemDto
    {
        /// <summary>
        /// id of the system
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// name of the system
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// id of the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user")]
        public string User { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventViewMemoUsageCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sender")]
        public string Sender { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventViewMemoUsage
    {

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderIdentifier")]
        public string SenderIdentifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderName")]
        public string SenderName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemId")]
        public System.Guid SenderSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemName")]
        public string SenderSystemName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientType")]
        public string RecipientType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageFormatMEMO")]
        public long MessageFormatMEMO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageFormatDP")]
        public long MessageFormatDP { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMessages")]
        public long TotalMessages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customAdditionalNotificationUsed")]
        public long CustomAdditionalNotificationUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customNotificationUsed")]
        public long CustomNotificationUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("standardNotificationUsed")]
        public long StandardNotificationUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasActions")]
        public long HasActions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasRecipientLabel")]
        public long HasRecipientLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasRecipientAttentionData")]
        public long HasRecipientAttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasSenderAttentionData")]
        public long HasSenderAttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isReplyable")]
        public long IsReplyable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasReplyData")]
        public long HasReplyData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasContentData")]
        public long HasContentData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasSenderContentResponsible")]
        public long HasSenderContentResponsible { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventViewMemoUsageResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("views")]
        public System.Collections.Generic.ICollection<EventViewMemoUsage> Views { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventViewOverviewCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderRecipientFilterValues")]
        public System.Collections.Generic.ICollection<string> SenderRecipientFilterValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sender")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandSender Sender { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderFilterValues")]
        public System.Collections.Generic.ICollection<string> SenderFilterValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandRecipient Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientFilterValues")]
        public System.Collections.Generic.ICollection<string> RecipientFilterValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystem")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandSenderSystem SenderSystem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientSystem")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandRecipientSystem RecipientSystem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandMessageType MessageType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageSize")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandMessageSize MessageSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandRecipientType RecipientType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandSenderType SenderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointId")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandRecipientContactPointId RecipientContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointName")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventViewOverviewCommandRecipientContactPointName RecipientContactPointName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventViewOverview
    {

        [System.Text.Json.Serialization.JsonPropertyName("day")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Day { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sender")]
        public string Sender { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public string Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemId")]
        public string SenderSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientSystemId")]
        public string RecipientSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderType")]
        public string SenderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientType")]
        public string RecipientType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sizeRange")]
        public string SizeRange { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeOfMessage")]
        public string TypeOfMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointId")]
        public string RecipientContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientContactPointName")]
        public string RecipientContactPointName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventViewOverviewResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("views")]
        public System.Collections.Generic.ICollection<EventViewOverview> Views { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventSearchCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string Subject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public string Owner { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ownerIdentityId")]
        public string OwnerIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actor")]
        public string Actor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actorIdentityId")]
        public string ActorIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventTime")]
        public System.DateTimeOffset EventTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationIdentityId")]
        public System.Guid OrganisationIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("system")]
        public System.Guid System { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingResultEventLog
    {

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public System.Collections.Generic.ICollection<EventLog> Content { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public PagingArguments Previous { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public PagingArguments Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An body containing the CPR validation status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CPRValidation
    {
        /// <summary>
        /// The result of the comparison between the CPR-number and the access-token:
        /// <br/>* **MATCHED**
        /// <br/>	* Indicates the given CPR matched the access-token.
        /// <br/>* **NOT_MATCHED**
        /// <br/>	* Indicates the given CPR did NOT match access-token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CPRValidationStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CPRValidationCommand
    {
        /// <summary>
        /// A CPR number - Danish personal identification numbers. It is a ten-digit number, no dash
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CprNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Abstraction intended to hide the DEFAULT-group relationship from the concept referred to as "direct privilege". Allowing clients to work with the "direct privilege", without the need for handling the implicit DEFAULT-group tying the privilege to the grantee.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPrivilege
    {
        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The UUID of the grantee.identityId who is granted this privilege via the DEFAULT-group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("granteeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid GranteeId { get; set; }

        /// <summary>
        /// The ID of the privilege resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The ID of the DEFAULT group which the direct privilege is placed in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityGroupId")]
        public System.Guid IdentityGroupId { get; set; }

        /// <summary>
        /// The identity ID of who has issued the privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IssuerId { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// The ID of the originally appointed privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentPrivilegeId")]
        public System.Guid ParentPrivilegeId { get; set; }

        /// <summary>
        /// The identity ID who is the scope the privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scopeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ScopeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expirationNotification")]
        public ExpirationNotification ExpirationNotification { get; set; }

        /// <summary>
        /// If a direct privilege is assigned an identity of type COMPANY the source will automatically be changed to APPOINTED
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DirectPrivilegeSource Source { get; set; }

        /// <summary>
        /// The type of the privilege, this is what will end up as part of the access-token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DirectPrivilegeType Type { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Expiration date (ie. privilege is inactive after the date has passed)Deprecated - use activeToDateTime instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        [System.Obsolete]
        public System.DateTimeOffset ActiveTo { get; set; }

        /// <summary>
        /// Expiration date and time (ie. privilege is inactive after the date has passed)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeToDateTime")]
        public System.DateTimeOffset ActiveToDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPrivilegeSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("directPrivileges")]
        public System.Collections.Generic.ICollection<DirectPrivilege> DirectPrivileges { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The object which contains expiration notification of privilege
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpirationNotification
    {
        /// <summary>
        /// The ID of the notification resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The date of when the privilege is expiring
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// The timestamp of when the notification of expiring notification should be send
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notificationDateTime")]
        public System.DateTimeOffset NotificationDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Granted group-privileges via group membership.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Grantee
    {
        /// <summary>
        /// The ID of the grantee resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The ID of the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityGroupId")]
        public System.Guid IdentityGroupId { get; set; }

        /// <summary>
        /// The ID of the grantee identity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IdentityId { get; set; }

        /// <summary>
        /// The ID of the issuer that granted the identity membership of the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IssuerId { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityGroup
    {
        /// <summary>
        /// The ID of the group resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The human-readable name of the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// The ID of the identity that created or last updated the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        public System.Guid IssuerId { get; set; }

        /// <summary>
        /// The ID of the identity that owns the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public System.Guid OwnerId { get; set; }

        /// <summary>
        /// The derived parent identity for the owner. For employees this will be the company, and for external systems it is also the company who owns the system. Default empty for other identity-types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentOwnerId")]
        public System.Guid ParentOwnerId { get; set; }

        /// <summary>
        /// The grantees assigned the group. Grantees will be authorized with the privileges from groups.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grantees")]
        public System.Collections.Generic.ICollection<Grantee> Grantees { get; set; }

        /// <summary>
        /// The privileges granted the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("privileges")]
        public System.Collections.Generic.ICollection<IdentityPrivilege> Privileges { get; set; }

        /// <summary>
        /// The type options are:
        /// <br/>* **DEFAULT**
        /// <br/>	* The default group for an identity. Used to support directly granted privileges.
        /// <br/>* **MANUAL**
        /// <br/>	* Manually created group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentityGroupType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Privilege which is granted to a group, with a given scope.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityPrivilege
    {
        /// <summary>
        /// The ID of the privilege resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The ID of the IdentityGroup which is granted this privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identityGroupId")]
        public System.Guid IdentityGroupId { get; set; }

        /// <summary>
        /// The identity ID of who has issued the privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        public System.Guid IssuerId { get; set; }

        /// <summary>
        /// The ID of the originally appointed privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentPrivilegeId")]
        public System.Guid ParentPrivilegeId { get; set; }

        /// <summary>
        /// The identity ID who is the scope the privilege.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scopeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ScopeId { get; set; }

        /// <summary>
        /// The type of the privilege, this is what will end up as part of the access-token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentityPrivilegeType Type { get; set; }

        /// <summary>
        /// The type options are:
        /// <br/>* **APPOINTED**
        /// <br/>	* A privilege appointed (~ granted) to a company, where the company then can grant the appointed privilege to group(s) or employee(s). While maintaining the link to the original appointed privilege.
        /// <br/>* **NPTE**
        /// <br/>	* NemLog-in Privat til Erhverv (NPTE) - Assigned based on NPTE integration.
        /// <br/>* **SELF_SERVICE**
        /// <br/>	* Self-service ~ issued by a user directly.
        /// <br/>* **MANUAL**
        /// <br/>	* Manually issued by a service-employee (citizen- or company-service) on-behalf-of a user.
        /// <br/>* **MIGRATED**
        /// <br/>	* Privilege migrated from the previous version of Digital Post (~ e-Boks).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentityPrivilegeSource Source { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expirationNotification")]
        public ExpirationNotification ExpirationNotification { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// Expiration date (ie. privilege is inactive after the date has passed).Deprecated - use activeToDateTime instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        [System.Obsolete]
        public System.DateTimeOffset ActiveTo { get; set; }

        /// <summary>
        /// Expiration date and time (ie. privilege is inactive after the date has passed).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeToDateTime")]
        public System.DateTimeOffset ActiveToDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityGroupSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityGroups")]
        public System.Collections.Generic.ICollection<IdentityGroup> IdentityGroups { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The legal name of a Citizen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CitizenName
    {
        /// <summary>
        /// The ID of the citizen name resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The first name of the citizen. E.g. a citizen named 'Mads Dittmann Mikkelsen' this property will contain 'Mads Dittmann'. This is viewable if the citizen is name protected.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (or surname) of the citizen. E.g. a citizen named 'Mads Dittmann Mikkelsen' this property will contain 'Mikkelsen'. This is not viewable if the citizen is name protected.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Marker to indicate if the citizen is name protected or not. If he is, then lastName will be filtered.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isProtected")]
        public bool IsProtected { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Used internally for authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientDetails
    {
        /// <summary>
        /// The ID of the client-details resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The client ID of the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// The resource IDs of the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resourceIds")]
        public System.Collections.Generic.ICollection<string> ResourceIds { get; set; }

        /// <summary>
        /// Is a secret required for the client ~ secret is mandatory for some client-types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("secretRequired")]
        public bool SecretRequired { get; set; }

        /// <summary>
        /// Secret for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("clientSecret")]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Active from, for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeFrom")]
        public System.DateTimeOffset ActiveFrom { get; set; }

        /// <summary>
        /// Active to, for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]
        public System.DateTimeOffset ActiveTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        public ClientType Type { get; set; } = new ClientType();

        /// <summary>
        /// Scoped client?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scoped")]
        public bool Scoped { get; set; }

        /// <summary>
        /// Client scopes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Scopes> Scopes { get; set; }

        /// <summary>
        /// Auto approved client scopes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("autoApproveScopes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<AutoApproveScopes> AutoApproveScopes { get; set; }

        /// <summary>
        /// Authorized grant-types for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorizedGrantTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<AuthorizedGrantTypes> AuthorizedGrantTypes { get; set; }

        /// <summary>
        /// OAuth2 registered redirect-URIs for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredRedirectUri")]
        public System.Collections.Generic.ICollection<System.Uri> RegisteredRedirectUri { get; set; }

        /// <summary>
        /// Registered authorities (~ privilege-types) for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorities")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Authorities> Authorities { get; set; }

        /// <summary>
        /// OIDC registered redirect-URIs for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredPostLogoutRedirectUri")]
        public System.Collections.Generic.ICollection<System.Uri> RegisteredPostLogoutRedirectUri { get; set; }

        /// <summary>
        /// Additional information for the client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        public System.Collections.Generic.IDictionary<string, object> AdditionalInformation { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientType
    {
        /// <summary>
        /// Name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Scopes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<scopes> Scopes { get; set; }

        /// <summary>
        /// Auto approved scopes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("autoApproveScopes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<autoApproveScopes> AutoApproveScopes { get; set; }

        /// <summary>
        /// Authorized grant-types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorizedGrantTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<authorizedGrantTypes> AuthorizedGrantTypes { get; set; }

        /// <summary>
        /// Access-token validity in seconds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accessTokenValiditySeconds")]
        public int AccessTokenValiditySeconds { get; set; }

        /// <summary>
        /// Refresh-token validity in seconds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refreshTokenValiditySeconds")]
        public int RefreshTokenValiditySeconds { get; set; }

        /// <summary>
        /// Authorities (~ privilege-types).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorities")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<authorities> Authorities { get; set; }

        /// <summary>
        /// Additional information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        public System.Collections.Generic.IDictionary<string, object> AdditionalInformation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains the email as well as whether it is verified and when.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailSubscription
    {
        /// <summary>
        /// The ID of the email-subscription resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The email of this subscription.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        public string Channel { get; set; }

        /// <summary>
        /// The timestamp of when this subscription was verified using a pin. If null, then the email has not been verified yet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verificationTime")]
        public System.DateTimeOffset VerificationTime { get; set; }

        /// <summary>
        /// The timestamp of when last was the last time this subscription was confirmed. Initially, it's equal to verificationTime.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmationTime")]
        public System.DateTimeOffset ConfirmationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The identifier of an Identity, this type is used to store the external identifiers, such as CPR- and CVR-number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identifier
    {
        /// <summary>
        /// The ID of the identifier resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The type options are:
        /// <br/>* **CPR_NUMBER**
        /// <br/>	* CPR-number - 10 digits, no dash
        /// <br/>* **CPR_UUID**
        /// <br/>	* Central UUID for a person defined by the Danish Civil Registration Authority.
        /// <br/>* **CVR_NUMBER**
        /// <br/>	* CVR number (8 digits) of the organisation related to the authentication context.
        /// <br/>* **EMPLOYEE_ID**
        /// <br/>	* 'RID' number. On the format: CVR:&lt;8 digits&gt;-RID:&lt;digits and letters&gt;
        /// <br/>* **PERSON_ID**
        /// <br/>	* PID number. Legacy Personal Identifier. Composed of numbers and dashes.
        /// <br/>* **SYSTEM_ID**
        /// <br/>	* UUID primary key for a system from the System registry.
        /// <br/>* **NEM_LOGIN_ID**
        /// <br/>	* NemLog-in id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentifierType Type { get; set; }

        /// <summary>
        /// Identifier value ~ ex. CPR- or CVR-number etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Digital Post Identity ~ decoupling external and internal references.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity
    {
        /// <summary>
        /// The ID of the identity resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// The type options are:
        /// <br/>* **EXTERNAL_SYSTEM**
        /// <br/>	* An external system/client, e.g. one used by the authorities.
        /// <br/>* **INTERNAL_SYSTEM**
        /// <br/>	* An internal Digital Post system.
        /// <br/>* **CITIZEN**
        /// <br/>	* A citizen.
        /// <br/>* **EMPLOYEE**
        /// <br/>	* An employee connected to a company.
        /// <br/>* **COMPANY**
        /// <br/>	* A company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentityType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public ClientDetails Details { get; set; }

        /// <summary>
        /// Identity identifiers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifiers")]
        public System.Collections.Generic.ICollection<Identifier> Identifiers { get; set; }

        /// <summary>
        /// The parent identity if this identity. For employees this will be the company, and for external systems it is also the company who owns the system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentIdentityId")]
        public System.Guid ParentIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citizenName")]
        public CitizenName CitizenName { get; set; }

        /// <summary>
        /// The name is reserved for employee/organization/client.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The alias is used to add a recognizable name for employees. Aliases can be, for example; e-mail, initials or nicknames.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string Alias { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subscription")]
        public EmailSubscription Subscription { get; set; }

        /// <summary>
        /// The status of the Identity. The options are:
        /// <br/>* **ACTIVE**,
        /// <br/>* **INACTIVE**
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentityStatus Status { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentitySearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identities")]
        public System.Collections.Generic.ICollection<Identity> Identities { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityEmailSubscriptionVerificationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pin")]
        public string Pin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("renewPin")]
        public bool RenewPin { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// To support creation and removal of multiple direct privileges (privileges in grantee DEFAULT group) in one single request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkDirectPrivileges
    {

        [System.Text.Json.Serialization.JsonPropertyName("privilegesToAdd")]
        public System.Collections.Generic.ICollection<DirectPrivilegeCommand> PrivilegesToAdd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("privilegesToRemove")]
        public System.Collections.Generic.ICollection<DirectPrivilegeBulkRevocation> PrivilegesToRemove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Type used during bulk revocation of a privilege in the DEFAULT group also known as direct privileges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPrivilegeBulkRevocation
    {
        /// <summary>
        /// Id of the privilege to be remove
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Version of the privilege to be remove. Should always be the latest version
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Issuer of the privilege to be removed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IssuerId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPrivilegeCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ActiveTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activeToDateTime")]
        public System.DateTimeOffset ActiveToDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentPrivilegeId")]
        public System.Guid ParentPrivilegeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("granteeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid GranteeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IssuerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scopeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ScopeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DirectPrivilegeCommandSource Source { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DirectPrivilegeCommandType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public System.Collections.Generic.ICollection<string> ClientId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        public string CprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprUuid")]
        public string CprUuid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        [System.Obsolete]
        public string EmployeeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("professionalPersonId")]
        public string ProfessionalPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sidNumber")]
        public string SidNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Type used during revocation of a privilege in the DEFAULT group also known as direct privileges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectPrivilegeRevocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("issuerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IssuerId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Exemption
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        public string CprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public MassPrintRecipient Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public System.DateTimeOffset Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sendLettersReceivedFromDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset SendLettersReceivedFromDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisation")]
        public string Organisation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forwardToAddress")]
        public bool ForwardToAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exemptByProxy")]
        public bool ExemptByProxy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exemptionStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ExemptionStatus ExemptionStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MassPrintRecipient
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zipCode")]
        public string ZipCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identity")]
        public string Identity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address1Text")]
        public string Address1Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address2Text")]
        public string Address2Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address3Text")]
        public string Address3Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExemptionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cprNumber")]
        public string CprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public ExemptionRecipientCommand Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public System.DateTimeOffset Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisation")]
        public string Organisation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forwardToAddress")]
        public bool ForwardToAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exemptByProxy")]
        public bool ExemptByProxy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExemptionRecipientCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address1Text")]
        public string Address1Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address2Text")]
        public string Address2Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address3Text")]
        public string Address3Text { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zipCode")]
        public string ZipCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A document can contain one or more files. Files can exist in variants, where the same document can contain the same content in different file formats e.g. text, HTML, PDF etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class File
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("encodingFormat")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string EncodingFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; }

        /// <summary>
        /// Will be set automatically when uploading content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public long FileSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileListResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("files")]
        public System.Collections.Generic.ICollection<File> Files { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The sender can supply information, which makes it possible for the recipient to act directly on the message. It could be creating a calendar appointment, pay an invoice in the sender’s payment solution, signing a document or other interactions with external systems based on an external link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Action
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionCode")]
        public string ActionCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionStartTime")]
        public System.DateTimeOffset ActionStartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionEndTime")]
        public System.DateTimeOffset ActionEndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entryPointUrl")]
        public string EntryPointUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reservationUUID")]
        public System.Guid ReservationUUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reservationAbstract")]
        public string ReservationAbstract { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string Location { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reservationStartTime")]
        public System.DateTimeOffset ReservationStartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reservationEndTime")]
        public System.DateTimeOffset ReservationEndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organizerMail")]
        public string OrganizerMail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organizerName")]
        public string OrganizerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("actionStatus")]
        public ActionStatus ActionStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Holds information of the status of an Action
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionStatus
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// Date and time for when the status code was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCodeLastUpdated")]
        public System.DateTimeOffset StatusCodeLastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ActionStatusCode StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string Note { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalActionStatusData")]
        public System.Collections.Generic.ICollection<AdditionalActionStatusData> AdditionalActionStatusData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Presents a status code for an ActionStatus
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ActionStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED_WITH_ERROR")]
        FAILED_WITH_ERROR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

    }

    /// <summary>
    /// Holds additional information of an ActionStatus which is optional. The limit of additional information is 10.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalActionStatusData
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalActionStatusDataType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AdditionalActionStatusDataType AdditionalActionStatusDataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Holds the status type of an AdditionalActionStatus
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalActionStatusDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL")]
        TECHNICAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"END_USER_PRESENTABLE")]
        END_USER_PRESENTABLE = 2,

    }

    /// <summary>
    /// Three types of documents can be added to a Message. Exactly one main document must be added, and 10 additional documents can be added. The Main document will be displayed first and any additional documents are displayed in the same sequence as they are added in the Message. It is also possible to add "technical" documents. Technical documents can contain any type of additional information about the message – normally according to a bilateral agreement between the sender and the receiver. "Technical" documents will not be handled or displayed by the viewing clients. A receiving system can choose to interpret and use the content in the technical documents, if it is of value to them.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Document
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DocumentType DocumentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        public string DocumentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("files")]
        public System.Collections.Generic.ICollection<File> Files { get; set; }

        /// <summary>
        /// Actions to act directly on upon the document. These can only be set by authorities using sender systems - not via this API.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actions")]
        public System.Collections.Generic.ICollection<Action> Actions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentListResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<Document> Documents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of values that determine the type of document.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* MAIN
    /// <br/>	* Represents both citizen and employee
    /// <br/>* ADDITIONAL
    /// <br/>	* Additional attachments to a message
    /// <br/>* TECHNICAL
    /// <br/>	* For inter-system messaging. Not to be used for regular messages,
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN")]
        MAIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDITIONAL")]
        ADDITIONAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL")]
        TECHNICAL = 3,

    }

    /// <summary>
    /// Other content data, only relevant for particular messages or in bilateral agreements, can be specified by the sender using up to ten AdditionalContentData classes using name/value pairs to describe an attribute and its value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalContentData
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentDataType")]
        public string ContentDataType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentDataName")]
        public string ContentDataName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentDataValue")]
        public string ContentDataValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Up to four subclasses of additional information that must be returned in a reply if specified by the sender, can be added to the ReplyData class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalReplyData
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addressId")]
        public string AddressId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addressLabel")]
        public string AddressLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("houseNumber")]
        public string HouseNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("door")]
        public string Door { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("floor")]
        public string Floor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("co")]
        public string Co { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zipCode")]
        public string ZipCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geographicEastingMeasure")]
        public string GeographicEastingMeasure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geographicNorthingMeasure")]
        public string GeographicNorthingMeasure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geographicHeightMeasure")]
        public string GeographicHeightMeasure { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// AttentionData is supplementary data describing the sender or the recipient.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttentionData
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("personId")]
        public string PersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("personLabel")]
        public string PersonLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productionUnitNumber")]
        public string ProductionUnitNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productionUnitName")]
        public string ProductionUnitName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("globalLocationNumber")]
        public string GlobalLocationNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string Location { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedEmailAgent")]
        public string RelatedEmailAgent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seNumber")]
        public string SeNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seCompanyName")]
        public string SeCompanyName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("telephoneNumber")]
        public string TelephoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedTelephoneAgent")]
        public string RelatedTelephoneAgent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentResponsibleId")]
        public string ContentResponsibleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentResponsibleLabel")]
        public string ContentResponsibleLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("generatingSystemId")]
        public string GeneratingSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("generatingSystemLabel")]
        public string GeneratingSystemLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unstructuredAddress")]
        public string UnstructuredAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sorDataSorIdentifier")]
        public string SorDataSorIdentifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sorDataEntryName")]
        public string SorDataEntryName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eid")]
        public string Eid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eidLabel")]
        public string EidLabel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Supplementary contact information requested by the authority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactInfo
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A MessageContactPoint can be used to identify different areas within a public authorities that it makes sense for eg. a citizen to send Digital Post. Each MessageContactPoint has an identified recipient system setup in the Digital Post solution. When a public authority act as a sender, they can specify the MessageContactPoint they want replies sent to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageContactPoint
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactGroup")]
        public string ContactGroup { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointId")]
        public System.Guid ContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactInfo")]
        public System.Collections.Generic.ICollection<ContactInfo> ContactInfo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ContentData are specified as classes, with the relevant properties. The purpose is to help the recipient sort and distribute received messages internally. ContentData is a flexible class that allows the sender to specify additional data describing the content of the message. Common content data are here predefined by Digital Post to assure consistency (so e.g. KLE, FORM, CPR-number etc. are always specified the same way).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentData
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprDataCprNumber")]
        public string CprDataCprNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cprDataName")]
        public string CprDataName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrDataCvrNumber")]
        public string CvrDataCvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrDataCompanyName")]
        public string CvrDataCompanyName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("motorVehicleLicenseNumber")]
        public string MotorVehicleLicenseNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("motorVehicleChassisNumber")]
        public string MotorVehicleChassisNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyNumber")]
        public string PropertyNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("caseId")]
        public string CaseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("caseSystem")]
        public string CaseSystem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kleDataSubjectKey")]
        public string KleDataSubjectKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kleDataVersion")]
        public string KleDataVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kleDataActivityFacet")]
        public string KleDataActivityFacet { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kleDataLabel")]
        public string KleDataLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("formDataTaskKey")]
        public string FormDataTaskKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("formDataVersion")]
        public string FormDataVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("formDataActivityFacet")]
        public string FormDataActivityFacet { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("formDataLabel")]
        public string FormDataLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productionUnitNumber")]
        public int ProductionUnitNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productionUnitName")]
        public string ProductionUnitName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("educationCode")]
        public string EducationCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("educationName")]
        public string EducationName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unstructuredAddress")]
        public string UnstructuredAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalContentData")]
        public System.Collections.Generic.ICollection<AdditionalContentData> AdditionalContentData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Part of Message when Message is forwarded.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForwardData
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("originalMessageId")]
        public System.Guid OriginalMessageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("originalSender")]
        public string OriginalSender { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("originalContentResponsible")]
        public string OriginalContentResponsible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointId")]
        public System.Guid ContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("newMemoId")]
        public System.Guid NewMemoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("originalMessageDateTime")]
        public System.DateTimeOffset OriginalMessageDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The information sent in one transaction through Digital Post. Equivalent to an e-mail in a traditional internet messaging setup, or to a letter received through physical mail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was created, received or sent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("messageDateTime")]
        public System.DateTimeOffset MessageDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mailboxId")]
        public System.Guid MailboxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("folderId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid FolderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MessageType MessageType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageState")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MessageState MessageState { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageIdentifier")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string MessageIdentifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageCode")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string MessageCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memoCreatedDateTime")]
        public System.DateTimeOffset MemoCreatedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        public System.DateTimeOffset ReceivedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forward")]
        public bool Forward { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reply")]
        public bool Reply { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("replyByDateTime")]
        public System.DateTimeOffset ReplyByDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flag")]
        public bool Flag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legallyNotified")]
        public bool LegallyNotified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legallyNotifiedDateTime")]
        public System.DateTimeOffset LegallyNotifiedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("read")]
        public bool Read { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("welcomeMessage")]
        public bool WelcomeMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        public bool ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sender")]
        public Sender Sender { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public Recipient Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<Document> Documents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("replyData")]
        public System.Collections.Generic.ICollection<ReplyData> ReplyData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forwardData")]
        public ForwardData ForwardData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentData")]
        public ContentData ContentData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sendDateTime")]
        public System.DateTimeOffset SendDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string Note { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postType")]
        public string PostType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messages")]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MANDATORY")]
        MANDATORY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_NOTIFICATION")]
        LEGAL_NOTIFICATION = 3,

    }

    /// <summary>
    /// The recipient of the message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recipient
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RecipientIdType RecipientIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdTypeLabel")]
        public string RecipientIdTypeLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attentionData")]
        public AttentionData AttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPoint")]
        public MessageContactPoint ContactPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecipientIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR")]
        CPR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR")]
        CVR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 3,

    }

    /// <summary>
    /// Part of Message when Message is a reply or repliable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplyData
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("childMessageId")]
        public System.Guid ChildMessageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentMessageId")]
        public System.Guid ParentMessageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageIdentifier")]
        public string MessageIdentifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]
        public string SenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientId")]
        public string RecipientId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("caseId")]
        public string CaseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointId")]
        public string ContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("generatingSystemId")]
        public string GeneratingSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalReplyData")]
        public System.Collections.Generic.ICollection<AdditionalReplyData> AdditionalReplyData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The sender of the message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sender
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{8}|\d{10})$")]
        public string SenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderIdType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SenderIdType SenderIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderIdTypeLabel")]
        public string SenderIdTypeLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attentionData")]
        public AttentionData AttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPoint")]
        public MessageContactPoint ContactPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A Mailbox has 4 built in folders: inbox, draft, sent, and deleted. Any number of user defined folders may be created to organise messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Folder
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mailboxId")]
        public System.Guid MailboxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentFolderId")]
        public System.Guid ParentFolderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("folderType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FolderType FolderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// MessageCount for a single Folder.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderMessageSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("folder")]
        public Folder Folder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageCount")]
        public MessageCount MessageCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderMessageSummaryResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("folderMessageSummaryList")]
        public System.Collections.Generic.ICollection<FolderMessageSummary> FolderMessageSummaryList { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of values that determine the type of a Folder.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually.
    /// <br/>* INBOX
    /// <br/>	* Folder for incoming messages. Standard folder so cannot be deleted.
    /// <br/>* DRAFTS
    /// <br/>	* Folder for creating and updating new messages until they are sent. Standard folder so cannot be deleted.
    /// <br/>* SENT
    /// <br/>	* Folder for sent messages. Standard folder so cannot be deleted.
    /// <br/>* DELETED
    /// <br/>	* Folder for deleted messages. Standard folder so cannot be deleted.
    /// <br/>* USER_DEFINED
    /// <br/>	* Folder for whatever purpose is useful.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FolderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INBOX")]
        INBOX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFTS")]
        DRAFTS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_DEFINED")]
        USER_DEFINED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageCount
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unreadMessages")]
        public int UnreadMessages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMessages")]
        public int TotalMessages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("latestMessageFrom")]
        public System.DateTimeOffset LatestMessageFrom { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("folders")]
        public System.Collections.Generic.ICollection<Folder> Folders { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An Access holds information about a relationship to a particular mailbox. It is either an owner relation or a representative relation such a curator or a read only access. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Access
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("optedOutOfNotificationsDateTime")]
        public System.DateTimeOffset OptedOutOfNotificationsDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccessType AccessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mailboxId")]
        public System.Guid MailboxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        public System.Guid IdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("introductionCompleted")]
        public bool IntroductionCompleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("smsNotificationSubscription")]
        public SmsNotificationSubscription SmsNotificationSubscription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailNotificationSubscriptions")]
        public System.Collections.Generic.ICollection<EmailNotificationSubscription> EmailNotificationSubscriptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pushNotificationSubscriptions")]
        public System.Collections.Generic.ICollection<PushNotificationSubscription> PushNotificationSubscriptions { get; set; }

        /// <summary>
        /// Not queryable!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("privileges")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<privileges> Privileges { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accesses")]
        public System.Collections.Generic.ICollection<Access> Accesses { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of values that determine the type of subscription.
    /// <br/>* UNKNOWN
    /// <br/>	* Used for fallback on unknown data - never set this manually
    /// <br/>* OWNER
    /// <br/>	* Represents both citizen and employee
    /// <br/>* PARTY_REPRESENTATIVE
    /// <br/>	* Legal rep, curator and the like
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccessType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OWNER")]
        OWNER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTY_REPRESENTATIVE")]
        PARTY_REPRESENTATIVE = 2,

    }

    /// <summary>
    /// Allows users to register up to 5 email adresses to be used for notification when new messages arrives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailNotificationSubscription
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("verificationTime")]
        public System.DateTimeOffset VerificationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmationTime")]
        public System.DateTimeOffset ConfirmationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notificationOutsideOfActiveWindowAllowed")]
        public bool NotificationOutsideOfActiveWindowAllowed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProviderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APN")]
        APN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FCM")]
        FCM = 2,

    }

    /// <summary>
    /// Allows users to register a push compliant device to be used for push notification when new messages arrives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PushNotificationSubscription
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providerType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ProviderType ProviderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deviceId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deviceToken")]
        public string DeviceToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instanceId")]
        public System.Guid InstanceId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tenantId")]
        public System.Guid TenantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notificationOutsideOfActiveWindowAllowed")]
        public bool NotificationOutsideOfActiveWindowAllowed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Allows users to register a mobile number to be used for notification when new messages arrives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmsNotificationSubscription
    {
        /// <summary>
        /// The id of the substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobileNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MobileNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("verificationTime")]
        public System.DateTimeOffset VerificationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmationTime")]
        public System.DateTimeOffset ConfirmationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notificationOutsideOfActiveWindowAllowed")]
        public bool NotificationOutsideOfActiveWindowAllowed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SenderInformation
    {

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]
        public string SenderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderIdType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SenderInformationIdType SenderIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageCountList")]
        public System.Collections.Generic.ICollection<MessageCount> MessageCountList { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SenderInformationIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CPR")]
        CPR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR")]
        CVR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SenderInformationResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("senderInformationList")]
        public System.Collections.Generic.ICollection<SenderInformation> SenderInformationList { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Unread
    {

        [System.Text.Json.Serialization.JsonPropertyName("mailboxId")]
        public System.Guid MailboxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unreadRegularMessagesExist")]
        public bool UnreadRegularMessagesExist { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public System.DateTimeOffset FromDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The central resource in message storing in Digital Post. A mailbox belongs to a company or a citizen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mailbox
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was initially created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        /// <summary>
        /// Date and time for when the resource or substructure was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastAccessedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastAccessedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ownerType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OwnerType OwnerType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ownerIdentityId")]
        public System.Guid OwnerIdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ownerName")]
        public string OwnerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ownerExternalId")]
        public string OwnerExternalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StatusType StatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientSystemAvailable")]
        public bool RecipientSystemAvailable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("exempt")]
        public bool Exempt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reminded")]
        public bool Reminded { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public Access Access { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailboxSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mailboxes")]
        public System.Collections.Generic.ICollection<Mailbox> Mailboxes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OwnerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION")]
        ORGANISATION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemFetch
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedDateTime")]
        public System.DateTimeOffset FinishedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemFetchStatusType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SystemFetchStatusType SystemFetchStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mailboxId")]
        public System.Guid MailboxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemId")]
        public System.Guid SystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMessages")]
        public long TotalMessages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fetchedMessages")]
        public long FetchedMessages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("failedMessages")]
        public long FailedMessages { get; set; }

        /// <summary>
        /// Original recipient from each message is preferred. If recipient has invalid contact point, the strategy is to fallback to use provided contact point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("preferOriginalMessageRecipient")]
        public bool PreferOriginalMessageRecipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromDateTime")]
        public System.DateTimeOffset FromDateTime { get; set; }

        /// <summary>
        /// If not provided this will default to createdDateTime of this SystemFetch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("toDateTime")]
        public System.DateTimeOffset ToDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SystemFetchStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FINISHED")]
        FINISHED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STOPPED")]
        STOPPED = 3,

    }

    /// <summary>
    /// Representation of File ressource also containing MultipartFile and Message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileContent
    {
        /// <summary>
        /// The id of the resource or substructure. It is automatically set by the system. Do not set or modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version of the resource or substructure. It is automatically incremented when resource or substructure is updated. Do not modify this field manually.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public long FileSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("multipartFile")]
        public byte[] MultipartFile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public Message Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessSubscriptionVerificationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pin")]
        public string Pin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("renewPin")]
        public bool RenewPin { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForwardCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("recipientId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RecipientIdType RecipientIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointId")]
        public System.Guid ContactPointId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderLabel")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string SenderLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientLabel")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string RecipientLabel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessagePatchCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("folderId")]
        public System.Guid FolderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageCode")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string MessageCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flag")]
        public bool Flag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legallyNotified")]
        public bool LegallyNotified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("read")]
        public bool Read { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public RecipientCommand Recipient { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecipientCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipientId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RecipientIdType RecipientIdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientIdTypeLabel")]
        public string RecipientIdTypeLabel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attentionData")]
        public AttentionData AttentionData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPoint")]
        public MessageContactPoint ContactPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessNotificationSubscriptionView
    {
        /// <summary>
        /// The field representing the number of notification subscriptions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long Count { get; set; }

        /// <summary>
        /// Type of the mailbox owner i.e COMPANY or CITIZEN
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetType")]
        public string TargetType { get; set; }

        /// <summary>
        /// Age of the mailbox CITIZEN owner
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("age")]
        public int Age { get; set; }

        /// <summary>
        /// Is there created SMS notification subscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("smsNotificationSubscription")]
        public bool SmsNotificationSubscription { get; set; }

        /// <summary>
        /// Is there confirmed SMS notification subscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verifiedSmsNotificationSubscription")]
        public bool VerifiedSmsNotificationSubscription { get; set; }

        /// <summary>
        /// Is there created PUSH notification subscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pushNotificationSubscription")]
        public bool PushNotificationSubscription { get; set; }

        /// <summary>
        /// Is there created EMAIL notification subscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailNotificationSubscription")]
        public bool EmailNotificationSubscription { get; set; }

        /// <summary>
        /// Is there confirmed EMAIL notification subscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verifiedEmailNotificationSubscription")]
        public bool VerifiedEmailNotificationSubscription { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result for the query to /notification-subscriptions endpointthe result includes information about notification subscriptionsfor specific parameters including target, notification subscriptions creation and verificationas well as age
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessNotificationSubscriptionViewSearchResult
    {
        /// <summary>
        /// List of AccessNotificationSubscription views divided by specific aggregation parameters
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<AccessNotificationSubscriptionView> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("encodingFormat")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string EncodingFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemFetchListResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("systemFetches")]
        public System.Collections.Generic.ICollection<SystemFetch> SystemFetches { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trustee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("idType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TrusteeIdType IdType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrusteeSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("trustees")]
        public System.Collections.Generic.ICollection<Trustee> Trustees { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The object that holds the IPs that the given systems is allowed to connect from. This can either be single IP or a range of IPs using the CIDR notation following the rfc4632. Note that the range must not cover more than 32 IPs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllowedIp
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// An IP or a range of IPs. Can both be IPv4 and IPv6
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Indicator if the ip is a single id (false) or a CIDR range (true).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("range")]
        public bool Range { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The API token that should be used in the authorization header when authenticating using mutual SSL. Note that the API token cannot be used on it own but is used an the identified when using mutual SSL
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiToken
    {
        /// <summary>
        /// The id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// A random value that is used as the unique part in the authentication
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// The value that should send in the authorization. This is the basic schema follow by a base64 encoding of the system id and the value of the api token e.g. 'basic base64(system.id : value)'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authenticationToken")]
        public string AuthenticationToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A representation of a public X.509 certificate. All the fields are extracted and added to the system when uploading a certificate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificatePublicKey
    {
        /// <summary>
        /// The id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algorithm")]
        public string Algorithm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        public string Format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("encoded")]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The 'mailsystem' or often just referred as 'system'. This is the registration of a sender or receiver system that organisations needs to register in order to integrate with Digital Post.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailSystem
    {
        /// <summary>
        /// The id the resource
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The version the resource
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// When the system was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// When the system was last updated
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// The name of the system, this is used to show a human friendly name in administrative access
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The endpoint for were Digital Post will deliver messages. If the system using the SMTP service protocol this should be the mail-address, if the system is using REST this should be the URL to where the Digital Post will deliver the messages. This is only required on active systems. If this is a URL it must be https.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// The endpoint for were Digital Post will deliver receipts. The rules are similar to the 'endpoint'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiptEndpoint")]
        public string ReceiptEndpoint { get; set; }

        /// <summary>
        /// Timestamp of then the system is considered in active service. If the is in the future the system cannot be used to integrate with Digital Post
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeFrom")]
        public System.DateTimeOffset ActiveFrom { get; set; }

        /// <summary>
        /// Timestamp of then the system is going out of active service. This can only be fileld if the activeFrom is not null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]
        public System.DateTimeOffset ActiveTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("technicalContact")]
        public Person TechnicalContact { get; set; }

        /// <summary>
        /// The service protocol that the system uses to integrate to Digital Post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("serviceProtocol")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MailSystemServiceProtocol ServiceProtocol { get; set; }

        /// <summary>
        /// If the system is based on a standard system, where a vendor can provide a common system that then can be utilized by authorities to have a managed system
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("standardSystemTemplateId")]
        public System.Guid StandardSystemTemplateId { get; set; }

        /// <summary>
        /// The id of the organisation that this system belong to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<SystemTypes> SystemTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowedIps")]
        public System.Collections.Generic.ICollection<AllowedIp> AllowedIps { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ssh")]
        public Ssh Ssh { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ocesPublicCertificate")]
        public OcesPublicCertificateCheck OcesPublicCertificate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiToken")]
        public ApiToken ApiToken { get; set; }

        /// <summary>
        /// The receipt format, MeMo or one of the two legacy formats
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiptFormat")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MailSystemReceiptFormat ReceiptFormat { get; set; }

        /// <summary>
        /// The name of the supplier of the system. Can be useful to have a friendly name of who the vendor / supplier for a given system is, if it is not managed the organisation themself
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public string Supplier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("businessContactEmail")]
        public string BusinessContactEmail { get; set; }

        /// <summary>
        /// The CVR number of a vendor. This enabled the vendor to integrate using their own credentials (e.g. certificate FOCES) to send on behalf of the organisation this system belongs to. The vendor then just have to utilize the api-token of this system to then send messages.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegatedCVR")]
        public string DelegatedCVR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultMaterialId")]
        public int DefaultMaterialId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OcesPublicCertificateCheck
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectDistinguishedNameSerialNumber")]
        public string SubjectDistinguishedNameSerialNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("certificateAuthority")]
        public string CertificateAuthority { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("certificateSerialNumber")]
        public string CertificateSerialNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTimeOffset ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sha1")]
        public string Sha1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("md5")]
        public string Md5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("certificatePublicKey")]
        public CertificatePublicKey CertificatePublicKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectKeyIdentifier")]
        public System.Collections.Generic.ICollection<byte[]> SubjectKeyIdentifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Person
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ssh
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sshUsername")]
        public string SshUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sshPublicKey")]
        public System.Collections.Generic.ICollection<byte[]> SshPublicKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systems")]
        public System.Collections.Generic.ICollection<MailSystem> Systems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationalUnit")]
        public bool OrganisationalUnit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisation")]
        public Organisation Organisation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        public ContactGroup Parent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targets")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Targets> Targets { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postkasseIds")]
        public System.Collections.Generic.ICollection<long> PostkasseIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPoint
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalDescription")]
        public string InternalDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targets")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<targets> Targets { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memoSizeThresholdMB")]
        public float MemoSizeThresholdMB { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowedNumberOfAttachments")]
        public int AllowedNumberOfAttachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reportLink")]
        public ReportLink ReportLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemId")]
        public System.Guid SystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointCodes")]
        public System.Collections.Generic.ICollection<ContactPointCode> ContactPointCodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactGroups")]
        public System.Collections.Generic.ICollection<ContactGroup> ContactGroups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recommendedAttributes")]
        public System.Collections.Generic.ICollection<RecommendedAttribute> RecommendedAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("searchTerms")]
        public System.Collections.Generic.ICollection<SearchTerm> SearchTerms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("translations")]
        public System.Collections.Generic.ICollection<Translation> Translations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legacyRecipientSystem")]
        public string LegacyRecipientSystem { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPointCode
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("codeVersion")]
        public string CodeVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContactPointCodeType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointCodeTypeName")]
        public string ContactPointCodeTypeName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPointSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPoints")]
        public System.Collections.Generic.ICollection<ContactPoint> ContactPoints { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Organisations contains information about a whether a organisation is a public authority or not, what kind of authority, are the terms signed, who is the legal contact and a reference to the logo of the authority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Organisation
    {
        /// <summary>
        /// The id of the organisation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The current version of the resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// The date and time of creation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// The date and time of last update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        /// <summary>
        /// The authority id, currently not in use
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorityId")]
        public string AuthorityId { get; set; }

        /// <summary>
        /// The name of the organisation, taken from virk.dk
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The industry code of the organisation, taken from virk.dk
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("industryCode")]
        public string IndustryCode { get; set; }

        /// <summary>
        /// The external identifier of the organisation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        /// <summary>
        /// Shows if the organisation is an authority or company. If it is an authority the organisation can receive messages from anyone, of the organisation is a company they can send and receive messages from authorities
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationType Type { get; set; }

        /// <summary>
        /// The kind of authority the organisation is.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorityType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationAuthorityType AuthorityType { get; set; }

        /// <summary>
        /// Indicator if the authority terms have been signed or not.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorityTerms")]
        public bool AuthorityTerms { get; set; }

        /// <summary>
        /// Is the authority allowed to send messages marked as legal notifications i.e. 'Forkyndelser'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalNotificationAllowed")]
        public bool LegalNotificationAllowed { get; set; }

        /// <summary>
        /// Is the authority allowed to send messages marked as mandatory. Which allows to send messages to parties that are exempt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandatoryPostAllowed")]
        public bool MandatoryPostAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalContact")]
        public Person LegalContact { get; set; }

        /// <summary>
        /// Indicator to if the organisation have uploaded a logo ('true') or not ('false')
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logoAvailable")]
        public bool LogoAvailable { get; set; }

        /// <summary>
        /// The media type / Mime type of the logo.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logoMediaType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationLogoMediaType LogoMediaType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targets")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<targets2> Targets { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationStatusType StatusType { get; set; }

        /// <summary>
        /// When was the status last changed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationTypeCode")]
        public string RegistrationTypeCode { get; set; }

        /// <summary>
        /// Have the introduction flow been completed in the rights-portal. Can be flipped from 'false' to 'true' by any employee but only from 'true' to 'false' by the system manager
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rightsIntroductionCompleted")]
        public bool RightsIntroductionCompleted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendedAttribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportLink
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("externalLink")]
        public string ExternalLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("externalLinkText")]
        public string ExternalLinkText { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchTerm
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("term")]
        public string Term { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Translation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postkasseId")]
        public long PostkasseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postkasseEmneId")]
        public long PostkasseEmneId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactGroupSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactGroups")]
        public System.Collections.Generic.ICollection<ContactGroup> ContactGroups { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int CurrentPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("elementsOnPage")]
        public int ElementsOnPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisations")]
        public System.Collections.Generic.ICollection<Organisation> Organisations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardSystemTemplate
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        public System.DateTimeOffset CreatedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deletedDateTime")]
        public System.DateTimeOffset DeletedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<systemTypes> SystemTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptEndpoint")]
        public string ReceiptEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("technicalContact")]
        public Person TechnicalContact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceProtocol")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StandardSystemTemplateServiceProtocol ServiceProtocol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowedIps")]
        public System.Collections.Generic.ICollection<AllowedIp> AllowedIps { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisation")]
        public Organisation Organisation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptFormat")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StandardSystemTemplateReceiptFormat ReceiptFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ssh")]
        public Ssh Ssh { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ocesPublicCertificate")]
        public OcesPublicCertificateCheck OcesPublicCertificate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardSystemTemplateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("deletedDateTime")]
        public System.DateTimeOffset DeletedDateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptEndpoint")]
        public string ReceiptEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("technicalContact")]
        public Person TechnicalContact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceProtocol")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StandardSystemTemplateCommandServiceProtocol ServiceProtocol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<systemTypes2> SystemTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowedIps")]
        public System.Collections.Generic.ICollection<AllowedIp> AllowedIps { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptFormat")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StandardSystemTemplateCommandReceiptFormat ReceiptFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ssh")]
        public Ssh Ssh { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ocesPublicCertificate")]
        public OcesPublicCertificateCheck OcesPublicCertificate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailSystemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptEndpoint")]
        public string ReceiptEndpoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activeFrom")]
        public System.DateTimeOffset ActiveFrom { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]
        public System.DateTimeOffset ActiveTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("technicalContact")]
        public Person TechnicalContact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceProtocol")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MailSystemCommandServiceProtocol ServiceProtocol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("standardSystemTemplateId")]
        public System.Guid StandardSystemTemplateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationId")]
        public System.Guid OrganisationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<systemTypes3> SystemTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowedIps")]
        public System.Collections.Generic.ICollection<AllowedIp> AllowedIps { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("receiptFormat")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MailSystemCommandReceiptFormat ReceiptFormat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public string Supplier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("businessContactEmail")]
        public string BusinessContactEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("delegatedCVR")]
        public string DelegatedCVR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultMaterialId")]
        public int DefaultMaterialId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPointCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalDescription")]
        public string InternalDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targets")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<targets3> Targets { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memoSizeThresholdMB")]
        public float MemoSizeThresholdMB { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowedNumberOfAttachments")]
        public int AllowedNumberOfAttachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reportLink")]
        public ReportLink ReportLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemId")]
        public System.Guid SystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPointCodes")]
        public System.Collections.Generic.ICollection<ContactPointCode> ContactPointCodes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactGroups")]
        public System.Collections.Generic.ICollection<ContactPointContactGroupCommand> ContactGroups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recommendedAttributes")]
        public System.Collections.Generic.ICollection<RecommendedAttribute> RecommendedAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("searchTerms")]
        public System.Collections.Generic.ICollection<SearchTerm> SearchTerms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("translations")]
        public System.Collections.Generic.ICollection<Translation> Translations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPointContactGroupCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactGroupCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationalUnit")]
        public bool OrganisationalUnit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postkasseIds")]
        public System.Collections.Generic.ICollection<long> PostkasseIds { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        public ContactGroupParentCommand Parent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactGroupParentCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("authorityId")]
        public string AuthorityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("industryCode")]
        public string IndustryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationCommandType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("authorityType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationCommandAuthorityType AuthorityType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("authorityTerms")]
        public bool AuthorityTerms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalNotificationAllowed")]
        public bool LegalNotificationAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandatoryPostAllowed")]
        public bool MandatoryPostAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalContact")]
        public Person LegalContact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("logoAvailable")]
        public bool LogoAvailable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("logoMediaType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrganisationCommandLogoMediaType LogoMediaType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rightsIntroductionCompleted")]
        public bool RightsIntroductionCompleted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The logo of the authority
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Logo
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        /// <summary>
        /// The size in bytes of the logo
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public long FileSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestOrganisationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("authorityId")]
        public string AuthorityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("industryCode")]
        public string IndustryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TestOrganisationCommandType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("authorityType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TestOrganisationCommandAuthorityType AuthorityType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("authorityTerms")]
        public bool AuthorityTerms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalNotificationAllowed")]
        public bool LegalNotificationAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandatoryPostAllowed")]
        public bool MandatoryPostAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalContact")]
        public Person LegalContact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("logoAvailable")]
        public bool LogoAvailable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("logoMediaType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TestOrganisationCommandLogoMediaType LogoMediaType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rightsIntroductionCompleted")]
        public bool RightsIntroductionCompleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OcesPublicCertificateCheckResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ocesPublicCertificate")]
        public OcesPublicCertificateCheck OcesPublicCertificate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardSystemTemplateListResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("standardSystemTemplates")]
        public System.Collections.Generic.ICollection<StandardSystemTemplate> StandardSystemTemplates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostkasseEmneIdsSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("postkasseEmnneIds")]
        public System.Collections.Generic.ICollection<long> PostkasseEmnneIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostkasseIdsSearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("postkasseIds")]
        public System.Collections.Generic.ICollection<long> PostkasseIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailSystemQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPointQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactGroupQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Material
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandatory")]
        public bool Mandatory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reply")]
        public bool Reply { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("labelPrefix")]
        public string LabelPrefix { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("useLabelPrefix")]
        public bool UseLabelPrefix { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultPostkasseId")]
        public long DefaultPostkasseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("defaultPostkasseemneId")]
        public long DefaultPostkasseemneId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("companyPostkasseId")]
        public long CompanyPostkasseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("companyPostkasseemneId")]
        public long CompanyPostkasseemneId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("messageType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MaterialMessageType MessageType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationSenderSystemSubscription
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("senderSystemId")]
        public System.Guid SenderSystemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionOperations")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<subscriptionOperations2> SubscriptionOperations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationSubscriptions")]
        public System.Collections.Generic.ICollection<OrganisationSubscription> OrganisationSubscriptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notificationUrl")]
        public string NotificationUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationSubscription
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cvrNumber")]
        public string CvrNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationSenderSystemSubscriptionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionOperations")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<subscriptionOperations3> SubscriptionOperations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organisationSubscriptions")]
        public System.Collections.Generic.ICollection<string> OrganisationSubscriptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notificationUrl")]
        public string NotificationUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionId
    {

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public System.DateTimeOffset Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public System.Collections.Generic.ICollection<byte[]> Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Verification
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public long Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        public System.Guid IdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        public string Channel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("channelType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationChannelType ChannelType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset Created { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("verificationTime")]
        public System.DateTimeOffset VerificationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmationTime")]
        public System.DateTimeOffset ConfirmationTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public TransactionId TransactionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attempts")]
        public long Attempts { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pin")]
        public string Pin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("linkToken")]
        public System.Guid LinkToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationState State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flowType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationFlowType FlowType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerificationUpdateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pin")]
        public string Pin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("linkToken")]
        public System.Guid LinkToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationUpdateCommandState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An body containing the Link token validation status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkValidationResponse
    {
        /// <summary>
        /// The result of the validation of verification from a token:
        /// <br/>* **VERIFIED**
        /// <br/>	* This indicates the verification is validated by the given token
        /// <br/>* **INVALID**
        /// <br/>	* This indicates the given token is not correct or the verification status does not the VERIFYING
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LinkValidationResponseStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationLinkCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("linkToken")]
        public System.Guid LinkToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerificationCreateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        public System.Guid IdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        public string Channel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("channelType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationCreateCommandChannelType ChannelType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flowType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationCreateCommandFlowType FlowType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerificationQueryResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("verifications")]
        public System.Collections.Generic.ICollection<Verification> Verifications { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerificationQueryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("identityId")]
        public System.Guid IdentityId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("channel")]
        public string Channel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("channelType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VerificationQueryCommandChannelType ChannelType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public byte[] Resource { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProtocolType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS4")]
        AS4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUBLISH_SUBSCRIBE")]
        REST_PUBLISH_SUBSCRIBE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PULL")]
        REST_PULL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUSH")]
        REST_PUSH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMTP")]
        SMTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    /// <summary>
    /// The set of privileges requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Privileges
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestParticipantIdentityTypeResolved
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTERNAL_SYSTEM")]
        EXTERNAL_SYSTEM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL_SYSTEM")]
        INTERNAL_SYSTEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutboxMessageStatusState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ModelAndViewStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"100 CONTINUE")]
        _100_CONTINUE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"101 SWITCHING_PROTOCOLS")]
        _101_SWITCHING_PROTOCOLS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"102 PROCESSING")]
        _102_PROCESSING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"103 CHECKPOINT")]
        _103_CHECKPOINT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"200 OK")]
        _200_OK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"201 CREATED")]
        _201_CREATED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"202 ACCEPTED")]
        _202_ACCEPTED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"203 NON_AUTHORITATIVE_INFORMATION")]
        _203_NON_AUTHORITATIVE_INFORMATION = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"204 NO_CONTENT")]
        _204_NO_CONTENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"205 RESET_CONTENT")]
        _205_RESET_CONTENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"206 PARTIAL_CONTENT")]
        _206_PARTIAL_CONTENT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"207 MULTI_STATUS")]
        _207_MULTI_STATUS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"208 ALREADY_REPORTED")]
        _208_ALREADY_REPORTED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"226 IM_USED")]
        _226_IM_USED = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"300 MULTIPLE_CHOICES")]
        _300_MULTIPLE_CHOICES = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"301 MOVED_PERMANENTLY")]
        _301_MOVED_PERMANENTLY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"302 FOUND")]
        _302_FOUND = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"302 MOVED_TEMPORARILY")]
        _302_MOVED_TEMPORARILY = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"303 SEE_OTHER")]
        _303_SEE_OTHER = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"304 NOT_MODIFIED")]
        _304_NOT_MODIFIED = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"305 USE_PROXY")]
        _305_USE_PROXY = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"307 TEMPORARY_REDIRECT")]
        _307_TEMPORARY_REDIRECT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"308 PERMANENT_REDIRECT")]
        _308_PERMANENT_REDIRECT = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"400 BAD_REQUEST")]
        _400_BAD_REQUEST = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"401 UNAUTHORIZED")]
        _401_UNAUTHORIZED = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"402 PAYMENT_REQUIRED")]
        _402_PAYMENT_REQUIRED = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"403 FORBIDDEN")]
        _403_FORBIDDEN = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"404 NOT_FOUND")]
        _404_NOT_FOUND = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"405 METHOD_NOT_ALLOWED")]
        _405_METHOD_NOT_ALLOWED = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"406 NOT_ACCEPTABLE")]
        _406_NOT_ACCEPTABLE = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"407 PROXY_AUTHENTICATION_REQUIRED")]
        _407_PROXY_AUTHENTICATION_REQUIRED = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"408 REQUEST_TIMEOUT")]
        _408_REQUEST_TIMEOUT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"409 CONFLICT")]
        _409_CONFLICT = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"410 GONE")]
        _410_GONE = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"411 LENGTH_REQUIRED")]
        _411_LENGTH_REQUIRED = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"412 PRECONDITION_FAILED")]
        _412_PRECONDITION_FAILED = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"413 PAYLOAD_TOO_LARGE")]
        _413_PAYLOAD_TOO_LARGE = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"413 REQUEST_ENTITY_TOO_LARGE")]
        _413_REQUEST_ENTITY_TOO_LARGE = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"414 URI_TOO_LONG")]
        _414_URI_TOO_LONG = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"414 REQUEST_URI_TOO_LONG")]
        _414_REQUEST_URI_TOO_LONG = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"415 UNSUPPORTED_MEDIA_TYPE")]
        _415_UNSUPPORTED_MEDIA_TYPE = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"416 REQUESTED_RANGE_NOT_SATISFIABLE")]
        _416_REQUESTED_RANGE_NOT_SATISFIABLE = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"417 EXPECTATION_FAILED")]
        _417_EXPECTATION_FAILED = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"418 I_AM_A_TEAPOT")]
        _418_I_AM_A_TEAPOT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"419 INSUFFICIENT_SPACE_ON_RESOURCE")]
        _419_INSUFFICIENT_SPACE_ON_RESOURCE = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"420 METHOD_FAILURE")]
        _420_METHOD_FAILURE = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"421 DESTINATION_LOCKED")]
        _421_DESTINATION_LOCKED = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"422 UNPROCESSABLE_ENTITY")]
        _422_UNPROCESSABLE_ENTITY = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"423 LOCKED")]
        _423_LOCKED = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"424 FAILED_DEPENDENCY")]
        _424_FAILED_DEPENDENCY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"425 TOO_EARLY")]
        _425_TOO_EARLY = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"426 UPGRADE_REQUIRED")]
        _426_UPGRADE_REQUIRED = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"428 PRECONDITION_REQUIRED")]
        _428_PRECONDITION_REQUIRED = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"429 TOO_MANY_REQUESTS")]
        _429_TOO_MANY_REQUESTS = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"431 REQUEST_HEADER_FIELDS_TOO_LARGE")]
        _431_REQUEST_HEADER_FIELDS_TOO_LARGE = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"451 UNAVAILABLE_FOR_LEGAL_REASONS")]
        _451_UNAVAILABLE_FOR_LEGAL_REASONS = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"500 INTERNAL_SERVER_ERROR")]
        _500_INTERNAL_SERVER_ERROR = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"501 NOT_IMPLEMENTED")]
        _501_NOT_IMPLEMENTED = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"502 BAD_GATEWAY")]
        _502_BAD_GATEWAY = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"503 SERVICE_UNAVAILABLE")]
        _503_SERVICE_UNAVAILABLE = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"504 GATEWAY_TIMEOUT")]
        _504_GATEWAY_TIMEOUT = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"505 HTTP_VERSION_NOT_SUPPORTED")]
        _505_HTTP_VERSION_NOT_SUPPORTED = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"506 VARIANT_ALSO_NEGOTIATES")]
        _506_VARIANT_ALSO_NEGOTIATES = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"507 INSUFFICIENT_STORAGE")]
        _507_INSUFFICIENT_STORAGE = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"508 LOOP_DETECTED")]
        _508_LOOP_DETECTED = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"509 BANDWIDTH_LIMIT_EXCEEDED")]
        _509_BANDWIDTH_LIMIT_EXCEEDED = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"510 NOT_EXTENDED")]
        _510_NOT_EXTENDED = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"511 NETWORK_AUTHENTICATION_REQUIRED")]
        _511_NETWORK_AUTHENTICATION_REQUIRED = 67,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelMap
    {

        [System.Text.Json.Serialization.JsonPropertyName("empty")]
        public bool Empty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlgorithmRequirement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRED")]
        REQUIRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECOMMENDED")]
        RECOMMENDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONAL")]
        OPTIONAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyStore
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("provider")]
        public System.Collections.Generic.IDictionary<string, string> Provider { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum KeyOperations
    {

        [System.Runtime.Serialization.EnumMember(Value = @"sign")]
        Sign = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"verify")]
        Verify = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"encrypt")]
        Encrypt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"decrypt")]
        Decrypt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"wrapKey")]
        WrapKey = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"unwrapKey")]
        UnwrapKey = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"deriveKey")]
        DeriveKey = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"deriveBits")]
        DeriveBits = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParsedX509CertChain
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectX500Principal")]
        public SubjectX500Principal SubjectX500Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuerX500Principal")]
        public IssuerX500Principal IssuerX500Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public int Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuerDN")]
        public IssuerDN IssuerDN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectDN")]
        public SubjectDN SubjectDN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sigAlgName")]
        public string SigAlgName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serialNumber")]
        public int SerialNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public System.DateTimeOffset NotBefore { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notAfter")]
        public System.DateTimeOffset NotAfter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tbscertificate")]
        public System.Collections.Generic.ICollection<byte[]> Tbscertificate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sigAlgOID")]
        public string SigAlgOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sigAlgParams")]
        public System.Collections.Generic.ICollection<byte[]> SigAlgParams { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuerUniqueID")]
        public System.Collections.Generic.ICollection<bool> IssuerUniqueID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectUniqueID")]
        public System.Collections.Generic.ICollection<bool> SubjectUniqueID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keyUsage")]
        public System.Collections.Generic.ICollection<bool> KeyUsage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("extendedKeyUsage")]
        public System.Collections.Generic.ICollection<string> ExtendedKeyUsage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectAlternativeNames")]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> SubjectAlternativeNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuerAlternativeNames")]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> IssuerAlternativeNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("signature")]
        public System.Collections.Generic.ICollection<byte[]> Signature { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("basicConstraints")]
        public int BasicConstraints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("criticalExtensionOIDs")]
        public System.Collections.Generic.ICollection<string> CriticalExtensionOIDs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nonCriticalExtensionOIDs")]
        public System.Collections.Generic.ICollection<string> NonCriticalExtensionOIDs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("encoded")]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]
        public PublicKey PublicKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum KeyTypeRequirement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRED")]
        REQUIRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECOMMENDED")]
        RECOMMENDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONAL")]
        OPTIONAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClaimsLocalesSupported
    {

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        public string Script { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("variant")]
        public string Variant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("extensionKeys")]
        public System.Collections.Generic.ICollection<string> ExtensionKeys { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unicodeLocaleAttributes")]
        public System.Collections.Generic.ICollection<string> UnicodeLocaleAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unicodeLocaleKeys")]
        public System.Collections.Generic.ICollection<string> UnicodeLocaleKeys { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iso3Language")]
        public string Iso3Language { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iso3Country")]
        public string Iso3Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayLanguage")]
        public string DisplayLanguage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayScript")]
        public string DisplayScript { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayCountry")]
        public string DisplayCountry { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayVariant")]
        public string DisplayVariant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public string Language { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiLocalesSupported
    {

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        public string Script { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("variant")]
        public string Variant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("extensionKeys")]
        public System.Collections.Generic.ICollection<string> ExtensionKeys { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unicodeLocaleAttributes")]
        public System.Collections.Generic.ICollection<string> UnicodeLocaleAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unicodeLocaleKeys")]
        public System.Collections.Generic.ICollection<string> UnicodeLocaleKeys { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iso3Language")]
        public string Iso3Language { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iso3Country")]
        public string Iso3Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayLanguage")]
        public string DisplayLanguage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayScript")]
        public string DisplayScript { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayCountry")]
        public string DisplayCountry { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayVariant")]
        public string DisplayVariant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public string Language { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CprPrivilegeCommandPrivilegeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CvrPrivilegeCommandPrivilegeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    /// <summary>
    /// Defines subscription to group of contacts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionOperations
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_CITIZENS")]
        ALL_CITIZENS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_CITIZENS")]
        NEW_CITIZENS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_COMPANIES")]
        ALL_COMPANIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_COMPANIES")]
        NEW_COMPANIES = 4,

    }

    /// <summary>
    /// Defines subscription to group of contacts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum subscriptionOperations
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_CITIZENS")]
        ALL_CITIZENS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_CITIZENS")]
        NEW_CITIZENS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_COMPANIES")]
        ALL_COMPANIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_COMPANIES")]
        NEW_COMPANIES = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MemoCreateAndSendCommandRecipientIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CVR")]
        CVR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR")]
        CPR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReceiptStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ALLOWED")]
        NOT_ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID")]
        INVALID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BulkReceiptReceiptStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ALLOWED")]
        NOT_ALLOWED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID")]
        INVALID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NgdpReceiptCommandServiceProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS4")]
        AS4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUBLISH_SUBSCRIBE")]
        REST_PUBLISH_SUBSCRIBE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PULL")]
        REST_PULL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUSH")]
        REST_PUSH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMTP")]
        SMTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventLogEventTag
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_APPROVED")]
        ACCESS_REQUEST_APPROVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_REJECTED")]
        ACCESS_REQUEST_REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_REVOKED")]
        ACCESS_REQUEST_REVOKED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_SUBMITTED")]
        ACCESS_REQUEST_SUBMITTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_WITHDRAWN")]
        ACCESS_REQUEST_WITHDRAWN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"APP_ACCESS_CREATED")]
        APP_ACCESS_CREATED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"APP_ACCESS_REMOVED")]
        APP_ACCESS_REMOVED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_RECEIPT_CREATED")]
        BUSINESS_RECEIPT_CREATED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_RECEIPT_RECEIVED")]
        BUSINESS_RECEIPT_RECEIVED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_RECEIPT_RECEIVED_BY_RECIPIENT_SYSTEM")]
        BUSINESS_RECEIPT_RECEIVED_BY_RECIPIENT_SYSTEM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_RECEIPT_SEND_TO_SENDER_SYSTEM")]
        BUSINESS_RECEIPT_SEND_TO_SENDER_SYSTEM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_RECEIPT_SEND_TO_SENDER_SYSTEM_FAILED")]
        BUSINESS_RECEIPT_SEND_TO_SENDER_SYSTEM_FAILED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_RECEIPT_SENT")]
        BUSINESS_RECEIPT_SENT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSENT_REVOKED")]
        CONSENT_REVOKED = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_CPR_UPDATED")]
        CONTACT_CPR_UPDATED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_CVR_UPDATED")]
        CONTACT_CVR_UPDATED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_GROUP_CHANGED")]
        CONTACT_GROUP_CHANGED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_POINT_CHANGED")]
        CONTACT_POINT_CHANGED = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_REGISTRY_ACCESSED_CITIZEN")]
        CONTACT_REGISTRY_ACCESSED_CITIZEN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_SEARCHES")]
        CONTACT_SEARCHES = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_LOOKED_UP")]
        CPR_LOOKED_UP = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR_LOOKED_UP")]
        CVR_LOOKED_UP = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED_MEMO_MESSAGE_RECALLED")]
        DELAYED_MEMO_MESSAGE_RECALLED = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED_MEMO_SEND_SENT")]
        DELAYED_MEMO_SEND_SENT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED_MEMO_SEND_VALIDATED_AWAITING_DELAY")]
        DELAYED_MEMO_SEND_VALIDATED_AWAITING_DELAY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN_PRIVILEGE_GRANTED")]
        DELEGATED_SUPPORT_ADMIN_PRIVILEGE_GRANTED = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN_PRIVILEGE_GRANTED_ON_BEHALF_OF")]
        DELEGATED_SUPPORT_ADMIN_PRIVILEGE_GRANTED_ON_BEHALF_OF = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REVOKED")]
        DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REVOKED = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REVOKED_ON_BEHALF_OF")]
        DELEGATED_SUPPORT_ADMIN_PRIVILEGE_REVOKED_ON_BEHALF_OF = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"DIGITAL_POST_EXEMPTED")]
        DIGITAL_POST_EXEMPTED = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"DIGITAL_POST_REGISTERED")]
        DIGITAL_POST_REGISTERED = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_PRIVILEGE_READ")]
        DIRECT_PRIVILEGE_READ = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_PRIVILEGE_SEARCHES")]
        DIRECT_PRIVILEGE_SEARCHES = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT_DELETED")]
        DRAFT_DELETED = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT_SAVED")]
        DRAFT_SAVED = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_NOTIFICATION_SUBSCRIPTION_CREATED")]
        EMAIL_NOTIFICATION_SUBSCRIPTION_CREATED = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_NOTIFICATION_SUBSCRIPTION_DELETED")]
        EMAIL_NOTIFICATION_SUBSCRIPTION_DELETED = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_NOTIFICATION_SUBSCRIPTION_UPDATED")]
        EMAIL_NOTIFICATION_SUBSCRIPTION_UPDATED = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_NOTIFICATION_SUBSCRIPTION_VERIFIED")]
        EMAIL_NOTIFICATION_SUBSCRIPTION_VERIFIED = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_LOG_SEARCHES")]
        EVENT_LOG_SEARCHES = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAG_CHANGED")]
        FLAG_CHANGED = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"FOLDER_CREATED")]
        FOLDER_CREATED = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"FOLDER_DELETED")]
        FOLDER_DELETED = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"FOLDER_MOVED")]
        FOLDER_MOVED = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"FOLDER_UPDATED")]
        FOLDER_UPDATED = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_DEACTIVATED")]
        IDENTITY_DEACTIVATED = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_REACTIVATED")]
        IDENTITY_REACTIVATED = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_READ")]
        IDENTITY_READ = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_SEARCHES")]
        IDENTITY_SEARCHES = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"INTRODUCTION_COMPLETED")]
        INTRODUCTION_COMPLETED = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"MAILBOX_READ")]
        MAILBOX_READ = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"MAILBOX_READ_BY_PARTY_REPRESENTATIVE")]
        MAILBOX_READ_BY_PARTY_REPRESENTATIVE = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_ARCHIVE_REJECTED")]
        MEMO_ARCHIVE_REJECTED = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_AVAILABLE_TO_RECIPIENT")]
        MEMO_AVAILABLE_TO_RECIPIENT = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_EXTRACTED")]
        MEMO_EXTRACTED = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_MASS_SEND_RECEIVED")]
        MEMO_MASS_SEND_RECEIVED = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_MESSAGE_RECALLED")]
        MEMO_MESSAGE_RECALLED = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_FAILED")]
        MEMO_SEND_FAILED = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_FETCHED_BY_RECIPIENT_SYSTEM")]
        MEMO_SEND_FETCHED_BY_RECIPIENT_SYSTEM = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_READY_FOR_FETCH")]
        MEMO_SEND_READY_FOR_FETCH = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_RECALLED")]
        MEMO_SEND_RECALLED = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_RECEIVED")]
        MEMO_SEND_RECEIVED = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_SENT_TO_RECIPIENT_SYSTEM")]
        MEMO_SEND_SENT_TO_RECIPIENT_SYSTEM = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_SENT_TO_RECIPIENT_SYSTEM_FAILED")]
        MEMO_SEND_SENT_TO_RECIPIENT_SYSTEM_FAILED = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_VALIDATED")]
        MEMO_SEND_VALIDATED = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SEND_VALIDATION_FAILED")]
        MEMO_SEND_VALIDATION_FAILED = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_TRANSFORMATION_FAILED")]
        MEMO_TRANSFORMATION_FAILED = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_CREATED")]
        MESSAGE_CREATED = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_DELETED")]
        MESSAGE_DELETED = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_FORWARDED_TO_AUTHORITY")]
        MESSAGE_FORWARDED_TO_AUTHORITY = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_FORWARDED_TO_EMAIL")]
        MESSAGE_FORWARDED_TO_EMAIL = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_FORWARDED_TO_TRUSTED")]
        MESSAGE_FORWARDED_TO_TRUSTED = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LEGALLY_NOTIFIED")]
        MESSAGE_LEGALLY_NOTIFIED = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_MOVED")]
        MESSAGE_MOVED = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_READ")]
        MESSAGE_READ = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_RECALLED_BY_ADMINISTRATOR")]
        MESSAGE_RECALLED_BY_ADMINISTRATOR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_RECEIVED")]
        MESSAGE_RECEIVED = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_SENT")]
        MESSAGE_SENT = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_SENT_MAILBOX")]
        MESSAGE_SENT_MAILBOX = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_UPDATED")]
        MESSAGE_UPDATED = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_ACTIVATED")]
        NEM_SMS_ACTIVATED = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_CREATED")]
        NEM_SMS_CREATED = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_DELETED")]
        NEM_SMS_DELETED = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_SEND_FAILED")]
        NEM_SMS_SEND_FAILED = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_SENT_AND_REJECTED")]
        NEM_SMS_SENT_AND_REJECTED = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_SENT_SUCCESSFULLY")]
        NEM_SMS_SENT_SUCCESSFULLY = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"NEM_SMS_UPDATED")]
        NEM_SMS_UPDATED = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATION_DEVICE_TOKEN_STALE_FAILED")]
        NOTIFICATION_DEVICE_TOKEN_STALE_FAILED = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATION_FAILED")]
        NOTIFICATION_FAILED = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATION_PUSH_COMPLETED")]
        NOTIFICATION_PUSH_COMPLETED = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTIFICATION_SENT")]
        NOTIFICATION_SENT = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON_SEARCHES")]
        PERSON_SEARCHES = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYSICAL_LETTER_SENT")]
        PHYSICAL_LETTER_SENT = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"PINCODE_SENT_TO_MOBILE_NEM_SMS")]
        PINCODE_SENT_TO_MOBILE_NEM_SMS = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGES_GRANTED")]
        PRIVILEGES_GRANTED = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGES_GRANTED_ON_BEHALF_OF")]
        PRIVILEGES_GRANTED_ON_BEHALF_OF = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGES_REVOKED")]
        PRIVILEGES_REVOKED = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGES_REVOKED_ON_BEHALF_OF")]
        PRIVILEGES_REVOKED_ON_BEHALF_OF = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGE_GROUP_READ")]
        PRIVILEGE_GROUP_READ = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGE_GROUP_SEARCHES")]
        PRIVILEGE_GROUP_SEARCHES = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_SUBSCRIPTION_CREATED")]
        PUSH_NOTIFICATION_SUBSCRIPTION_CREATED = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_SUBSCRIPTION_DELETED")]
        PUSH_NOTIFICATION_SUBSCRIPTION_DELETED = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_SUBSCRIPTION_UPDATED")]
        PUSH_NOTIFICATION_SUBSCRIPTION_UPDATED = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"READ_ACCESS_CREATED")]
        READ_ACCESS_CREATED = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"READ_ACCESS_DELETED")]
        READ_ACCESS_DELETED = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_NOTIFICATION_SUBSCRIPTION_CREATED")]
        SMS_NOTIFICATION_SUBSCRIPTION_CREATED = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_NOTIFICATION_SUBSCRIPTION_DELETED")]
        SMS_NOTIFICATION_SUBSCRIPTION_DELETED = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_NOTIFICATION_SUBSCRIPTION_UPDATED")]
        SMS_NOTIFICATION_SUBSCRIPTION_UPDATED = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_NOTIFICATION_SUBSCRIPTION_VERIFIED")]
        SMS_NOTIFICATION_SUBSCRIPTION_VERIFIED = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_CREATED")]
        STATISTICAL_REPORT_CREATED = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_DELETED")]
        STATISTICAL_REPORT_DELETED = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_DOWNLOADED")]
        STATISTICAL_REPORT_DOWNLOADED = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_SUBSCRIPTION_CREATED")]
        STATISTICAL_REPORT_SUBSCRIPTION_CREATED = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_SUBSCRIPTION_DELETED")]
        STATISTICAL_REPORT_SUBSCRIPTION_DELETED = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_SUBSCRIPTION_READ")]
        STATISTICAL_REPORT_SUBSCRIPTION_READ = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_SUBSCRIPTION_SEARCH")]
        STATISTICAL_REPORT_SUBSCRIPTION_SEARCH = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICAL_REPORT_SUBSCRIPTION_UPDATED")]
        STATISTICAL_REPORT_SUBSCRIPTION_UPDATED = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_READ")]
        STATISTICS_READ = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CHANGED")]
        SYSTEM_CHANGED = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FETCH_FINISHED")]
        SYSTEM_FETCH_FINISHED = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FETCH_STARTED")]
        SYSTEM_FETCH_STARTED = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FETCH_STOPPED")]
        SYSTEM_FETCH_STOPPED = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO_SYSTEM_FETCHED")]
        MEMO_SYSTEM_FETCHED = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL_RECEIPT_SENT")]
        TECHNICAL_RECEIPT_SENT = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL_RECEIPT_SENT_TO_SENDER_SYSTEM")]
        TECHNICAL_RECEIPT_SENT_TO_SENDER_SYSTEM = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"UNOPENED_MAIL_AS_PHYSICAL_POST")]
        UNOPENED_MAIL_AS_PHYSICAL_POST = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"UNOPENED_MAIL_NOT_AS_PHYSICAL_POST")]
        UNOPENED_MAIL_NOT_AS_PHYSICAL_POST = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"UNOPENED_MAIL_SENT_AS_PHYSICAL_POST")]
        UNOPENED_MAIL_SENT_AS_PHYSICAL_POST = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MetaDataMessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DIGITALPOST")]
        DIGITALPOST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEMSMS")]
        NEMSMS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYSICAL_LETTER")]
        PHYSICAL_LETTER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatisticsMetadataMessageFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO")]
        MEMO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DP")]
        DP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandSender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandRecipient
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandSenderSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandRecipientSystem
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandMessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandMessageSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandSenderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandRecipientContactPointId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventViewOverviewCommandRecipientContactPointName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_GROUP")]
        NO_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP_PARAM")]
        GROUP_PARAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CPRValidationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MATCHED")]
        MATCHED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_MATCHED")]
        NOT_MATCHED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DirectPrivilegeSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTED")]
        APPOINTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NPTE")]
        NPTE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SELF_SERVICE")]
        SELF_SERVICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MIGRATED")]
        MIGRATED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DirectPrivilegeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityGroupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityPrivilegeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityPrivilegeSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTED")]
        APPOINTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NPTE")]
        NPTE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SELF_SERVICE")]
        SELF_SERVICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MIGRATED")]
        MIGRATED = 5,

    }

    /// <summary>
    /// Client scopes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Scopes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WRITE")]
        WRITE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OPENID")]
        OPENID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NATIVE")]
        NATIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_NUMBER")]
        CPR_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DUMMY")]
        DUMMY = 6,

    }

    /// <summary>
    /// Auto approved client scopes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AutoApproveScopes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WRITE")]
        WRITE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OPENID")]
        OPENID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NATIVE")]
        NATIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_NUMBER")]
        CPR_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DUMMY")]
        DUMMY = 6,

    }

    /// <summary>
    /// Authorized grant-types for the client.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizedGrantTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORIZATION_CODE")]
        AUTHORIZATION_CODE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORIZATION_CODE_WITH_PKCE")]
        AUTHORIZATION_CODE_WITH_PKCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CREDENTIALS")]
        CLIENT_CREDENTIALS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFRESH_TOKEN")]
        REFRESH_TOKEN = 4,

    }

    /// <summary>
    /// Registered authorities (~ privilege-types) for the client.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorities
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    /// <summary>
    /// Scopes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum scopes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WRITE")]
        WRITE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OPENID")]
        OPENID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NATIVE")]
        NATIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_NUMBER")]
        CPR_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DUMMY")]
        DUMMY = 6,

    }

    /// <summary>
    /// Auto approved scopes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum autoApproveScopes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WRITE")]
        WRITE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OPENID")]
        OPENID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NATIVE")]
        NATIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_NUMBER")]
        CPR_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DUMMY")]
        DUMMY = 6,

    }

    /// <summary>
    /// Authorized grant-types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum authorizedGrantTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORIZATION_CODE")]
        AUTHORIZATION_CODE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORIZATION_CODE_WITH_PKCE")]
        AUTHORIZATION_CODE_WITH_PKCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CREDENTIALS")]
        CLIENT_CREDENTIALS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFRESH_TOKEN")]
        REFRESH_TOKEN = 4,

    }

    /// <summary>
    /// Authorities (~ privilege-types).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum authorities
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentifierType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_NUMBER")]
        CPR_NUMBER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR_UUID")]
        CPR_UUID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR_NUMBER")]
        CVR_NUMBER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE_ID")]
        EMPLOYEE_ID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON_ID")]
        PERSON_ID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ID")]
        SYSTEM_ID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PROFESSIONAL_PERSON_ID")]
        PROFESSIONAL_PERSON_ID = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTERNAL_SYSTEM")]
        EXTERNAL_SYSTEM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL_SYSTEM")]
        INTERNAL_SYSTEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DirectPrivilegeCommandSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTED")]
        APPOINTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NPTE")]
        NPTE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SELF_SERVICE")]
        SELF_SERVICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MIGRATED")]
        MIGRATED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DirectPrivilegeCommandType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExemptionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED")]
        PROCESSED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SenderIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR")]
        CPR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR")]
        CVR = 2,

    }

    /// <summary>
    /// Not queryable!
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum privileges
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_REPRESENTATIVE")]
        LEGAL_REPRESENTATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURATOR")]
        CURATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATOR")]
        LIQUIDATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTOR_OF_ESTATE")]
        EXECUTOR_OF_ESTATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE")]
        DANISH_BUSINESS_AUTHORITY_SERVICE_EMPLOYEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_WRITE")]
        MESSAGE_WRITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_ADMINISTRATOR")]
        ORGANISATION_ADMINISTRATOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_EMPLOYEE")]
        MESSAGE_EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_REQUEST_ADMINISTRATOR")]
        ACCESS_REQUEST_ADMINISTRATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTION_LOG_ADMINISTRATOR")]
        ACTION_LOG_ADMINISTRATOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEARCH_LOG_ADMINISTRATOR")]
        SEARCH_LOG_ADMINISTRATOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_LOG_ADMINISTRATOR")]
        MESSAGE_LOG_ADMINISTRATOR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STATISTICS_ADMINISTRATOR")]
        STATISTICS_ADMINISTRATOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MANAGER")]
        SYSTEM_MANAGER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RECALL_ADMINISTRATOR")]
        RECALL_ADMINISTRATOR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN_SERVICE_EMPLOYEE")]
        CITIZEN_SERVICE_EMPLOYEE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORT")]
        SUPPORT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATED_SUPPORT_ADMIN")]
        DELEGATED_SUPPORT_ADMIN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUSTED_RECIPIENT")]
        TRUSTED_RECIPIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEST_PORTAL")]
        TEST_PORTAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_IDENTITY_PROVIDER")]
        SYSTEM_TEST_IDENTITY_PROVIDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE_BASIC")]
        MESSAGE_BASIC = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_ADMINISTRATOR")]
        CONTACT_ADMINISTRATOR = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER")]
        LEGAL_OWNER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY")]
        LEGAL_OWNER_OF_INACTIVE_OR_CLOSED_COMPANY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANISATION_USER_ADMINISTRATOR")]
        ORGANISATION_USER_ADMINISTRATOR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"COURTS_OF_DENMARK")]
        COURTS_OF_DENMARK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_POWER_OF_ATTORNEY")]
        FULL_POWER_OF_ATTORNEY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_DISTRIBUTION")]
        SYSTEM_DISTRIBUTION = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CONTACT")]
        SYSTEM_CONTACT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_MAILBOX")]
        SYSTEM_MAILBOX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SYSTEM_REGISTRY")]
        SYSTEM_SYSTEM_REGISTRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_IDENTITY_REGISTRY")]
        SYSTEM_IDENTITY_REGISTRY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TRANSFORMATION")]
        SYSTEM_TRANSFORMATION = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_VERIFICATION")]
        SYSTEM_VERIFICATION = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SECURITY")]
        SYSTEM_SECURITY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SUBSCRIPTION")]
        SYSTEM_SUBSCRIPTION = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CVR")]
        SYSTEM_CVR = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_CPR")]
        SYSTEM_CPR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SFTP")]
        SYSTEM_AUTH_SFTP = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_SFTP_SERVER")]
        SYSTEM_SFTP_SERVER = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EVENT")]
        SYSTEM_EVENT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_OUTBOX")]
        SYSTEM_OUTBOX = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"DATAFORDELER_PUSH")]
        DATAFORDELER_PUSH = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ALLOWED_IP")]
        SYSTEM_ALLOWED_IP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_TEST_DATA")]
        SYSTEM_TEST_DATA = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ACCESS_REQUEST_REGISTRY")]
        SYSTEM_ACCESS_REQUEST_REGISTRY = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_FAILED_EVENT_REGISTRY")]
        SYSTEM_FAILED_EVENT_REGISTRY = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_PUSH_NOTIFICATION_SENDER")]
        SYSTEM_PUSH_NOTIFICATION_SENDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_SENDER_SYSTEM")]
        AUTHORITY_SENDER_SYSTEM = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_SENDER_SYSTEM")]
        COMPANY_SENDER_SYSTEM = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY_RECIPIENT_SYSTEM")]
        AUTHORITY_RECIPIENT_SYSTEM = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_RECIPIENT_SYSTEM")]
        COMPANY_RECIPIENT_SYSTEM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DELEGATE_SYSTEM")]
        DELEGATE_SYSTEM = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_LETTER_SENDER")]
        SYSTEM_LETTER_SENDER = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH_NOTIFICATION_TENANT")]
        PUSH_NOTIFICATION_TENANT = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_AUTH_SERVER")]
        SYSTEM_AUTH_SERVER = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_EGRESS_PROXY_SERVER")]
        SYSTEM_EGRESS_PROXY_SERVER = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_STATISTICAL_REPORTING")]
        SYSTEM_STATISTICAL_REPORTING = 61,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrusteeIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CPR")]
        CPR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CVR")]
        CVR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MailSystemServiceProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS4")]
        AS4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUBLISH_SUBSCRIBE")]
        REST_PUBLISH_SUBSCRIBE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PULL")]
        REST_PULL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUSH")]
        REST_PUSH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMTP")]
        SMTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SystemTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT_DEFAULT")]
        RECIPIENT_DEFAULT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MailSystemReceiptFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO")]
        MEMO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DP")]
        DP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DP2")]
        DP2 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Targets
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum targets
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactPointCodeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FORM")]
        FORM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GLN")]
        GLN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"KLE")]
        KLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SOR")]
        SOR = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationAuthorityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STATE")]
        STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MUNICIPALITY")]
        MUNICIPALITY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REGION")]
        REGION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationLogoMediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_PNG")]
        IMAGE_PNG = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum targets2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum systemTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT_DEFAULT")]
        RECIPIENT_DEFAULT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandardSystemTemplateServiceProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS4")]
        AS4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUBLISH_SUBSCRIBE")]
        REST_PUBLISH_SUBSCRIBE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PULL")]
        REST_PULL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUSH")]
        REST_PUSH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMTP")]
        SMTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandardSystemTemplateReceiptFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO")]
        MEMO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DP")]
        DP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DP2")]
        DP2 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandardSystemTemplateCommandServiceProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS4")]
        AS4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUBLISH_SUBSCRIBE")]
        REST_PUBLISH_SUBSCRIBE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PULL")]
        REST_PULL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUSH")]
        REST_PUSH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMTP")]
        SMTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum systemTypes2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT_DEFAULT")]
        RECIPIENT_DEFAULT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandardSystemTemplateCommandReceiptFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO")]
        MEMO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DP")]
        DP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DP2")]
        DP2 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MailSystemCommandServiceProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS4")]
        AS4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUBLISH_SUBSCRIBE")]
        REST_PUBLISH_SUBSCRIBE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PULL")]
        REST_PULL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REST_PUSH")]
        REST_PUSH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMTP")]
        SMTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SFTP")]
        SFTP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum systemTypes3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT_DEFAULT")]
        RECIPIENT_DEFAULT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MailSystemCommandReceiptFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMO")]
        MEMO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DP")]
        DP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DP2")]
        DP2 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum targets3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CITIZEN")]
        CITIZEN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationCommandType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationCommandAuthorityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STATE")]
        STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MUNICIPALITY")]
        MUNICIPALITY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REGION")]
        REGION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganisationCommandLogoMediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_PNG")]
        IMAGE_PNG = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestOrganisationCommandType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHORITY")]
        AUTHORITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestOrganisationCommandAuthorityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STATE")]
        STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MUNICIPALITY")]
        MUNICIPALITY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REGION")]
        REGION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestOrganisationCommandLogoMediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_PNG")]
        IMAGE_PNG = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaterialMessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DIGITALPOST")]
        DIGITALPOST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEMSMS")]
        NEMSMS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum subscriptionOperations2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_ORGANISATIONS")]
        ALL_ORGANISATIONS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_ORGANISATIONS")]
        NEW_ORGANISATIONS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum subscriptionOperations3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_ORGANISATIONS")]
        ALL_ORGANISATIONS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_ORGANISATIONS")]
        NEW_ORGANISATIONS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationChannelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNVERIFIED")]
        UNVERIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFYING")]
        VERIFYING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RENEWING_PIN")]
        RENEWING_PIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RENEWING_LINK")]
        RENEWING_LINK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationFlowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LINK")]
        LINK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PIN")]
        PIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationUpdateCommandState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNVERIFIED")]
        UNVERIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFYING")]
        VERIFYING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RENEWING_PIN")]
        RENEWING_PIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RENEWING_LINK")]
        RENEWING_LINK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LinkValidationResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID")]
        INVALID = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationCreateCommandChannelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationCreateCommandFlowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LINK")]
        LINK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PIN")]
        PIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VerificationQueryCommandChannelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubjectX500Principal
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("encoded")]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerX500Principal
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("encoded")]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerDN
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubjectDN
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicKey
    {

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        public string Format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algorithm")]
        public string Algorithm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("encoded")]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625